[
  {
    "objectID": "tutorials/tuberculosis_sim.html",
    "href": "tutorials/tuberculosis_sim.html",
    "title": "How to create a TB simulation",
    "section": "",
    "text": "This notebook demonstrates how to create and run simulations for tuberculosis (TB) using the tbsim and starsim libraries. The simulations will model the spread and impact of TB over time on a population."
  },
  {
    "objectID": "tutorials/tuberculosis_sim.html#packages",
    "href": "tutorials/tuberculosis_sim.html#packages",
    "title": "How to create a TB simulation",
    "section": "Packages",
    "text": "Packages\nThe code in this section imports the starsim package, which provides the capabilities to create and run simulations. Note that while tbsim enables some functionality, the full capabilities are provided by starsim.\n\n\n# Import necessary libraries\nimport tbsim as mtb\nimport starsim as ss\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "tutorials/tuberculosis_sim.html#high-level-steps",
    "href": "tutorials/tuberculosis_sim.html#high-level-steps",
    "title": "How to create a TB simulation",
    "section": "High level steps",
    "text": "High level steps\nAs suggested by the starsim ‘Getting Started’ tutorial (https://docs.idmod.org/projects/starsim/en/latest/tutorials/tut_intro.html) we will proceed with the most common tasks for modeling infectious diseases, in our case, TB:\n\nDefining parameters (Building the simulation):\nRunning a simulation\nPlotting results"
  },
  {
    "objectID": "tutorials/tuberculosis_sim.html#building-the-simulation",
    "href": "tutorials/tuberculosis_sim.html#building-the-simulation",
    "title": "How to create a TB simulation",
    "section": "Building the simulation",
    "text": "Building the simulation\nIn this case, in order to make our code reusable we will encapsulate all our preparation steps in the following function, make_tb. This function puts together all what is needed for a simulation to run and returns a  simulation object with a tuberculosis disease, methods, etc., and with user specified parameters. NOTE: Default values are generally specified as part of the init method for each class, i.e. people, network, tb, etc.).\n\nPeople:\n\nCreates a population of 1,000 agents using the People class from the starsim (aliased as ss) library.\n\n\n\nTB Disease\n\nDefines the disease parameters for TB:\n\nbeta: Transmission rate.\ninit_prev: Initial prevalence of TB (25%).\n\nInitializes the TB model with these parameters using the tbsim library (aliased as mtb).\n\n\n\nNetwork\n\nDefines the network parameters:\n\nn_contacts: Number of contacts per agent, following a Poisson distribution with a mean (lambda) of 5.\ndur: Duration of contact (0 means end after one timestep).\n\nInitializes a random network with these parameters.\n\n\n\nDemographics\nThe demographics section sets up two demographic processes for the simulation: pregnancy and death rates. These, define and incorporate key demographic events into the simulation model:\n\nPregnancy: Adds new agents to the population at a rate of 15 per 1,000 people. (TODO: Verify if this is done every time every step or if this is a one time event at set_prognoses)\nDeaths: Removes agents from the population at a rate of 10 per 1,000 people. (same question as above)\n\nThis setup ensures the simulation realistically accounts for population changes over time due to births and deaths.\n\n\nSimulation Parameters and Initialization\nThis part of the code defines the parameters for the simulation and initializes it using these parameters:\n\nDefining Simulation Parameters:\n\ndt=ss.days(7)/365: This defines the time step (dt) for the simulation. Here, 7/365 represents a weekly time step, the simulation progresses in weekly increments.\nstart = 1990: This sets the starting year of the simulation to 1990.\nend = 2000: This sets the ending year of the simulation to 2000.\n\nInitializing the Simulation:\n\nss.Sim: This is a class from the starsim package used to create a simulation object.\nParameters:\n\npeople=pop: Specifies the population object created earlier.\nnetworks=net: Specifies the network object that describes how agents are connected.\ndiseases=tb: Specifies the TB disease model initialized earlier.\npars=sim_pars: Passes the simulation parameters defined above.\ndemographics=dems: Specifies the list of demographic events (pregnancy and death rates).\n\n\nSetting Verbosity:\n\nThis line adjusts how frequently the simulation prints its status updates.\nsim.pars.dt / 5: By dividing the time step (dt) by 5, the simulation is set to print updates every 5 years. This ensures that the status updates are less frequent but still provide periodic insights into the simulation’s progress.\n\nReturning the Simulation Object:\n\nThis returns the initialized simulation object so that it can be run or further interacted with outside of the make_tb function.\n\n\n\n# Define the function to create a tuberculosis simulation\ndef make_tb():\n    # --------------- People ----------\n    initial_population_size = 1000\n    pop = ss.People(n_agents=initial_population_size)\n    \n    # --------------- TB disease --------\n    tb_pars = dict(  # Disease parameters\n        beta = 0.001, \n        init_prev = 0.25,\n        )\n    tb = mtb.TB(tb_pars) # Initialize\n\n    # --------------- Network ---------\n    net_pars = dict(    # Network parameters\n        n_contacts=ss.poisson(lam=5),\n        dur = 0, # End after one timestep\n        )\n    net = ss.RandomNet(net_pars)  # Initialize a random network\n\n    # --------------- Demographics --------\n    dems = [\n        ss.Pregnancy(pars=dict(fertility_rate=15)), # Per 1,000 people\n        ss.Deaths(pars=dict(death_rate=10)), # Per 1,000 people\n    ]\n\n    # --------------- simulation -------\n    sim_pars = dict(    # define simulation parameters\n        dt=ss.days(7)/365,\n        start = 1990,\n        stop = 2020,\n        )\n    sim = ss.Sim(people=pop, networks=net, diseases=tb, pars=sim_pars, demographics=dems)   # initialize the simulation\n    sim.pars.verbose = sim.pars.dt / 5      # Print status every 5 years instead of every 10 steps\n    return sim\n\n\n\nRun the Simulation\nWe will now create and run the first simulation using the make_tb function with the parameters set above.\nPlease note, at some point it may be convenient to parameterize the make_tb function and make it even more re-usable (for intance for scenarios creation).\n\n\n# Create and run the first simulation\nsim = make_tb()  # Create the simulation - running make_tb returns a simulation of a type ss.Sim (from starsim library) therefore we can use all the methods of the ss.Sim class\nsim.run()        # Run the simulation \n\nInitializing sim with 1000 agents\n  Running 1990.0 ( 0/1565) (0.00 s)  ———————————————————— 0%\n  Running 1995.0 (260/1565) (0.43 s)  •••————————————————— 17%\n  Running 2000.0 (520/1565) (0.85 s)  ••••••—————————————— 33%\n  Running 2005.0 (780/1565) (1.26 s)  •••••••••——————————— 50%\n  Running 2009.9 (1040/1565) (1.68 s)  •••••••••••••——————— 67%\n  Running 2014.9 (1300/1565) (2.08 s)  ••••••••••••••••———— 83%\n  Running 2019.9 (1560/1565) (2.48 s)  •••••••••••••••••••— 100%\n\n\nSim(n=1000; 1990—2020; networks=randomnet; demographics=pregnancy, deaths; diseases=tb)"
  },
  {
    "objectID": "tutorials/tuberculosis_sim.html#analyzing-the-results",
    "href": "tutorials/tuberculosis_sim.html#analyzing-the-results",
    "title": "How to create a TB simulation",
    "section": "Analyzing The Results",
    "text": "Analyzing The Results\nLet’s first review the data that was generated (and is available in the results array). This collected data is specified in the init_results, and then updated in the update_results TB functions. For more detailed information, please refer to the official documentation at StarSim Results API.\n\ntbr = sim.diseases['tb'].results\n\nprint(\"This is a dictionary of the results that you can plot: \\n\",tbr.keys())\n\nThis is a dictionary of the results that you can plot: \n ['timevec', 'n_susceptible', 'n_infected', 'n_on_treatment', 'n_ever_infected', 'prevalence', 'new_infections', 'cum_infections', 'n_latent_slow', 'n_latent_fast', 'n_active', 'n_active_presymp', 'n_active_presymp_15+', 'n_active_smpos', 'n_active_smpos_15+', 'n_active_smneg', 'n_active_smneg_15+', 'n_active_exptb', 'n_active_exptb_15+', 'new_active', 'new_active_15+', 'cum_active', 'cum_active_15+', 'new_deaths', 'new_deaths_15+', 'cum_deaths', 'cum_deaths_15+', 'n_infectious', 'n_infectious_15+', 'prevalence_active', 'incidence_kpy', 'deaths_ppy', 'n_reinfected', 'new_notifications_15+', 'n_detectable_15+']\n\n\nnow, below we show the plotting of a single channel (result):\n\n\nplt.plot(range(0,len(tbr['prevalence'])),tbr['prevalence'])\nplt.title(\"The most basic plotting sample \\n TB Prevalence \\n (raw data)\")\n\nText(0.5, 1.0, 'The most basic plotting sample \\n TB Prevalence \\n (raw data)')\n\n\n\n\n\n\n\n\n\n##\n\nPlotting\n\n\nOnce you get familiar with the available data in the results array, you can proceed to plot your results using your favorite method.\n\n###\n\n1: Using the starsim library\n\n\nPlot the results of the simulation - inherited from the starsim library which is available under the diseases attribute of the simulation:  sim.plot() \n\n\nsim.plot()\n\nFigure(1200x900)\n\n\n\n\n\n\n\n\n\n\nUsing TBSim plots:\nmtb.plot_combined() where: {‘single simulation’: sim.results.flatten(), ‘tb only results’: sim.diseases[‘tb’].results.flatten()} each key will be a scenario plotted with a different color\nfor more information mouse over the ‘plot_combined’ function.\n\nmtb.plot_combined({'single simulation': sim.results.flatten(), 'tb only results': sim.diseases['tb'].results.flatten()})\n\nSaved figure to /Users/mine/git/tbdocs/docs/tutorials/results/scenarios_20250725_135254.png\n\n\n\n\n\n\n\n\n\n\n\nUsing your own function\nTake a look at the sample below, it will show you how to access the results dataframe (dict) and how with a simple function you can plot your simulation’s results.\n\n\n# Method 3:  ------------------------------------------------------\nfig = plt.figure()\nsimulation_results = sim.results['tb']\nfor rkey in [ 'latent_fast', 'active_presymp', 'active_smpos', 'active_smneg', 'active_exptb']:\n    plt.plot(simulation_results['n_'+rkey], label=rkey.title())\nplt.legend()\nplt.title(\"A basic sample of plotting sim results\")\n\nText(0.5, 1.0, 'A basic sample of plotting sim results')"
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html",
    "href": "tutorials/tbhiv_comorbidity.html",
    "title": "HIV Comorbidity in TBSim",
    "section": "",
    "text": "This notebook demonstrates how to use the HIV comorbidity module in the tbsim package.\nModule Location: tbsim/comorbidities/hiv/"
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#overview",
    "href": "tutorials/tbhiv_comorbidity.html#overview",
    "title": "HIV Comorbidity in TBSim",
    "section": "Overview",
    "text": "Overview\nThe HIV comorbidity module in TBSim allows users to simulate the impact of HIV infection on TB disease dynamics. Rather than modeling HIV progression in detail, it serves as a lightweight comorbidity that modifies TB risks based on HIV state.\nThe module is composed of three key components:\n\nHIV Model: Represents HIV infection as a comorbidity.\nHIV Intervention: Enables scenario testing via prevalence and ART coverage.\nTB-HIV Connector: Bridges HIV and TB models, applying comorbidity risk logic."
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#hiv-model",
    "href": "tutorials/tbhiv_comorbidity.html#hiv-model",
    "title": "HIV Comorbidity in TBSim",
    "section": "HIV Model",
    "text": "HIV Model\nThe HIV model simulates HIV infection status and its progression through simplified states:\n\nACUTE\nLATENT\nAIDS\n\nThis implementation is intended as a modifier for TB outcomes, rather than a standalone disease model.\n\nKey Parameters\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\ninit_prev\nProbability of being HIV-positive (ACUTE stage) at simulation start\n\n\ninit_onart\nProbability of being on ART if HIV-positive\n\n\nacute_to_latent\nDaily probability of transitioning from ACUTE to LATENT\n\n\nLATENT_to_aids\nDaily probability of transitioning from LATENT to AIDS\n\n\naids_to_dead\nDaily probability of death after reaching AIDS (currently unused)\n\n\nart_progression_factor\nMultiplier reducing HIV progression for agents on ART\n\n\n\n\n\n*** Important: ***\n\nAt step 0, the model looks for the existance of an HivIntervention handling the HIV infection and art coverage, if none is found then it uses the values defined at Disease level to set the initial values."
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#hiv-intervention",
    "href": "tutorials/tbhiv_comorbidity.html#hiv-intervention",
    "title": "HIV Comorbidity in TBSim",
    "section": "HIV Intervention",
    "text": "HIV Intervention\nThe HivIntervention class allows control over HIV prevalence and ART coverage in the population. This is useful for scenario testing and simulating public health campaigns.\n\nSupported Modes\n\n'infection': Adjust HIV infection prevalence\n'art': Adjust ART coverage\n'both': Adjust both infection and treatment\n\n\n\nWhat It Does\n\nApplies changes to the HIV state of the population\nOperates within a specified time range (start to stop)\nCan be targeted to specific age groups or entire population\n\nintervention = HivInterventions(pars=dict(\n    mode='both',\n    prevalence=0.2,\n    percent_on_ART=0.5,\n    minimum_age=15,\n    max_age=49,\n    start=ss.date('2000-01-01'),\n    stop=ss.date('2010-12-31'),\n))\nAlso, the parameters shown above are the same ones that you can modify in order to run a different scenario."
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#tb-hiv-connector",
    "href": "tutorials/tbhiv_comorbidity.html#tb-hiv-connector",
    "title": "HIV Comorbidity in TBSim",
    "section": "TB-HIV Connector",
    "text": "TB-HIV Connector\nThe TB_HIV_Connector class links the TB and HIV models, simulating the comorbidity effect of HIV on TB progression.\n\nPurpose\nModifies TB progression parameters based on an individual’s current HIV state.\n\n\nRisk Multiplier Table\n\n\n\nHIV State\nTB Progression Risk Multiplier\n\n\n\n\nACUTE\n1.5\n\n\nLATENT\n2.0\n\n\nAIDS\n3.0\n\n\n\n\n\nBehavior at Each Time Step\n\nIdentify all TB-infected individuals.\nLook up their current HIV state.\nApply a multiplier to their TB rr_activation value (risk of progressing to active TB)."
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#process-flow-diagram",
    "href": "tutorials/tbhiv_comorbidity.html#process-flow-diagram",
    "title": "HIV Comorbidity in TBSim",
    "section": "Process Flow Diagram",
    "text": "Process Flow Diagram\n+-----------------+\n|   TB Infection  |\n+-----------------+\n        |\n        v\n+-----------------+     +-----------------------+\n|  HIV Comorbidity| --&gt; | HIV State (ACUTE,...) |\n+-----------------+     +-----------------------+\n        |                          |\n        |      TB_HIV_Connector    |\n        +-------------------------&gt; Applies RR Multiplier\n                                   |\n                                   v\n                    +-------------------------------+\n                    | TB rr_activation Adjusted     |\n                    | Based on HIV State            |\n                    +-------------------------------+"
  },
  {
    "objectID": "tutorials/tbhiv_comorbidity.html#example-code",
    "href": "tutorials/tbhiv_comorbidity.html#example-code",
    "title": "HIV Comorbidity in TBSim",
    "section": "Example Code",
    "text": "Example Code\n\n# Uncomment the line below to install the tbsim package at the specified branch:\n# !pip install git+https://github.com/starsimhub/tbsim.git@117-implement-a-simple-hiv-model\n\n\nimport tbsim as mtb\nimport starsim as ss\nimport sciris as sc\nimport numpy as np\nimport matplotlib.pyplot as plt# Rendering with Quatro\n\ndef build_tbhiv_sim(simpars=None, tbpars=None, hivinv_pars=None) -&gt; ss.Sim:\n    sim_pars = dict(\n        \n        dt=ss.days(7),\n        start=ss.date('1980-01-01'),\n        stop=ss.date('2035-12-31'),\n        rand_seed=123,\n        verbose=0,\n    )\n    tb_pars = dict(\n        beta=ss.prob(0.1),\n        init_prev=ss.bernoulli(p=0.25),\n        rel_sus_latentslow=0.1,\n    )\n\n    hivinv_pars = hivinv_pars or dict(\n        mode='both',\n        prevalence=0.20,\n        percent_on_ART=0.20,\n        minimum_age=15,\n        max_age=49,\n        start=ss.date('2000-01-01'),\n        stop=ss.date('2010-12-31'),\n    )\n    hiv_intervention = mtb.HivInterventions(pars=hivinv_pars)\n    hiv = mtb.HIV()\n    connector = mtb.TB_HIV_Connector()\n    \n    tb = mtb.TB(pars=tb_pars)\n    people = ss.People(n_agents=1_000)\n    network = ss.RandomNet(pars=dict(n_contacts=ss.poisson(lam=2), dur=0))\n\n    # --- Assemble Simulation ---\n    sim = ss.Sim(\n        people=people,\n        diseases=[tb, hiv],\n        interventions=[hiv_intervention],\n        networks=network,\n        connectors=[connector],\n        pars=sim_pars,\n    )\n    return sim\n\n# Run the simulation: \nsim = build_tbhiv_sim()\nsim.run()\nsim.plot()\nplt.show()\n\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 1, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n\n\nFigure(1200x900)\n\n\n\n\n\n\n\n\n\n   Created in Deepnote"
  },
  {
    "objectID": "tutorials/run_tbhiv_scens.html",
    "href": "tutorials/run_tbhiv_scens.html",
    "title": "Running TB HIV scenarios",
    "section": "",
    "text": "Usage sample (with scenarios and plotting)\nTo use the hiv comorbidity features, you will need to add these 3 things to the simulation: - HIV disease to the disease list: Configure it as requested. Also, please note that if no intervention is specified, the model will use a initial prevalence and art coverage as specified in the HIV disease. - TB_HIV connector to the connector list: You will have the hability to update the values of each modifier as specified in the connector. - HivIntervention to the intervention list: The same intervention can be used for managing the art coverage and the prevalence depending on the specified parameters.\n# Import required packages\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sciris as sc\nimport tbsim as mtb\nimport starsim as ss"
  },
  {
    "objectID": "tutorials/run_tbhiv_scens.html#build-tb-hiv-simulation",
    "href": "tutorials/run_tbhiv_scens.html#build-tb-hiv-simulation",
    "title": "Running TB HIV scenarios",
    "section": "Build TB-HIV Simulation",
    "text": "Build TB-HIV Simulation\n\n\ndef build_tbhiv_sim(simpars=None, tbpars=None, hivinv_pars=None) -&gt; ss.Sim:\n    \"\"\"Build a TB-HIV simulation with current disease and intervention models.\"\"\"\n    \n    # Set up the simulation parameters:\n    default_simpars = dict(\n        dt=ss.days(7),\n        start=ss.date('1980-01-01'), stop=ss.date('2025-12-31'),\n        rand_seed=123,\n        verbose=0,\n    )\n    if simpars: default_simpars.update(simpars)\n    \n    # People:\n    n_agents = 1000\n    extra_states = [ss.FloatArr('SES', default=ss.bernoulli(p=0.3))]\n    people = ss.People(n_agents=n_agents, extra_states=extra_states)\n\n    # Disease 1: TB:\n    pars = dict(beta=ss.prob(0.01), init_prev=ss.bernoulli(p=0.25), rel_sus_latentslow=0.1)\n    if tbpars:\n        pars.update(tbpars)\n    tb = mtb.TB(pars=pars)\n\n    # Disease 2: HIV:\n    hiv_pars = dict(init_prev=ss.bernoulli(p=0.10), init_onart=ss.bernoulli(p=0.50))\n    hiv = mtb.HIV(pars=hiv_pars)\n\n    # Network:\n    network = ss.RandomNet(pars=dict(n_contacts=ss.poisson(lam=2), dur=0))\n\n    # Connector: TB-HIV\n    connector = mtb.TB_HIV_Connector()\n    \n    # Interventions: HivInterventions \n    interventions = []\n    if hivinv_pars is not None:\n        hiv.update_pars(hiv_pars)\n        hivinv_pars = hivinv_pars or dict(\n            mode='both', \n            prevalence=0.20, \n            percent_on_ART=0.20,\n            minimum_age=15, \n            max_age=49,\n            start=ss.date('2000-01-01'), stop=ss.date('2010-12-31'),\n        )\n        hiv_intervention = mtb.HivInterventions(pars=hivinv_pars)\n        interventions = [hiv_intervention]\n\n    # Create the simulation:\n    sim = ss.Sim(\n        people=people,\n        diseases=[tb, hiv],\n        interventions=interventions,\n        networks=network,\n        connectors=[connector],\n        pars=default_simpars,\n    )\n    return sim"
  },
  {
    "objectID": "tutorials/run_tbhiv_scens.html#run-hiv-intervention-scenarios",
    "href": "tutorials/run_tbhiv_scens.html#run-hiv-intervention-scenarios",
    "title": "Running TB HIV scenarios",
    "section": "Run HIV Intervention Scenarios",
    "text": "Run HIV Intervention Scenarios\nThis function runs multiple intervention strategies, each with varying HIV prevalence, ART coverage, and target age ranges.\n\ndef run_scenarios():\n   \n    \"\"\"Run the scenarios and return the results.\"\"\"\n    scenarios = {\n        'baseline': None,\n        'early_low_delivery_both':      dict(mode= 'both', prevalence=0.10, percent_on_ART=0.10, \n                                        minimum_age=15, max_age=49,\n                                        start=ss.date('1990-01-01'), stop=ss.date('2000-12-31')),\n        \n        'high_coverage_delivery_both':  dict(mode= 'both', prevalence=0.25, percent_on_ART=0.75, \n                                        minimum_age=10, max_age=60,\n                                        start=ss.date('2000-01-01'), stop=ss.date('2025-12-31')), \n        \n        'infection_1990_delivery':     dict(mode= 'infection', prevalence=0.10, \n                                        minimum_age=15, max_age=49,\n                                        start=ss.date('1990-01-01'), stop=ss.date('2000-12-31')),\n        \n        'infection_2000_delivery':     dict(mode= 'infection', prevalence=0.25,  \n                                        minimum_age=10, max_age=60,\n                                        start=ss.date('2000-01-01'), stop=ss.date('2025-12-31')), \n        \n        'early_art_delivery':           dict(mode= 'art',  percent_on_ART=0.10, \n                                        minimum_age=15, max_age=49,\n                                        start=ss.date('1990-01-01'), stop=ss.date('2025-12-31')),\n        \n        'high_art_delivery':            dict(mode= 'art',  percent_on_ART=0.75, \n                                        minimum_age=10, max_age=60,\n                                        start=ss.date('2000-01-01'), stop=ss.date('2025-12-31')), \n    }\n    flat_results = {}\n    for name, hivinv_pars in scenarios.items():\n        print(f'Running scenario: {name}')\n        sim = build_tbhiv_sim(hivinv_pars=hivinv_pars)\n        sim.run()\n        flat_results[name] = sim.results.flatten()\n    return flat_results"
  },
  {
    "objectID": "tutorials/run_tbhiv_scens.html#plotting-results",
    "href": "tutorials/run_tbhiv_scens.html#plotting-results",
    "title": "Running TB HIV scenarios",
    "section": "Plotting Results",
    "text": "Plotting Results\nWe extract relevant metrics across scenarios and generate time series plots to visualize their trends. Metrics can be filtered by keywords or exclusions.\n\ndef plot_results(flat_results, keywords=None, exclude=['15']):\n    metrics = sorted({k for flat in flat_results.values() for k in flat.keys() if (not keywords or any(kw in k for kw in keywords))}, reverse=True)\n    metrics = [m for m in metrics if not any(excl in m for excl in exclude)]\n    n_metrics = len(metrics)\n    if n_metrics &gt; 0:\n        n_cols = 5\n        n_rows = int(np.ceil(n_metrics / n_cols))\n        fig, axs = plt.subplots(n_rows, n_cols, figsize=(20, n_rows*2))\n        axs = axs.flatten()\n    cmap = plt.cm.get_cmap('tab10', len(flat_results))\n    for i, metric in enumerate(metrics):\n        ax = axs[i]\n        for j, (scenario, flat) in enumerate(flat_results.items()):\n            if metric in flat:\n                result = flat[metric]\n                ax.plot(result.timevec, result.values, label=scenario, color=cmap(j))\n        ax.set_title(metric)\n        ax.set_ylabel('%' if max(result.values) &lt; 1 else 'Value')\n        ax.set_xlabel('Time')\n        ax.grid(True)\n        ax.legend(loc='upper right', fontsize=6 if len(flat_results) &lt;= 5 else 5)\n        ax.set_facecolor('#f0f0f0')\n    plt.tight_layout()\n    plt.savefig(f'{sc.thisdir()}/tbhiv_scenarios.png', dpi=300)\n    plt.show()"
  },
  {
    "objectID": "tutorials/run_tbhiv_scens.html#plotting",
    "href": "tutorials/run_tbhiv_scens.html#plotting",
    "title": "Running TB HIV scenarios",
    "section": "Plotting",
    "text": "Plotting\n\n# Run everything\nflat_results = run_scenarios()\nplot_results(flat_results)\n\nRunning scenario: baseline\nRunning scenario: early_low_delivery_both\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 1, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n\n\nRunning scenario: high_coverage_delivery_both\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 1, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n\n\nRunning scenario: infection_1990_delivery\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 1, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 2, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n\n\nRunning scenario: infection_2000_delivery\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 1, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 2, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:112: RuntimeWarning: \nNot enough acute cases to revert. Expected: 3, Available: 0\n  ss.warn(msg=f\"Not enough acute cases to revert. Expected: {-delta}, Available: {len(acute_uids)}\")\n\n\nRunning scenario: early_art_delivery\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 19, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 18, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 17, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 16, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 15, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n\n\nRunning scenario: high_art_delivery\nHIV intervention present, skipping initialization.\n\n\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 133, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 132, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 131, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 130, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 129, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 128, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 127, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 126, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 125, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 124, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 123, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 122, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 121, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 120, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 119, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 118, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 117, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 116, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 115, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 114, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 113, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 112, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 111, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/Users/mine/git/hivtb/tbsim/comorbidities/hiv/intervention.py:139: RuntimeWarning: \nNot enough candidates for ART. Expected: 110, Available: 0\n  ss.warn(msg=f\"Not enough candidates for ART. Expected: {delta}, Available: {len(candidates)}\")\n/var/folders/dr/x377cvd10rl0xw0c1tj1vvzh0000gn/T/ipykernel_80111/1139370148.py:10: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  cmap = plt.cm.get_cmap('tab10', len(flat_results))"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "These tutorials provide step-by-step guides for using TBSim to model tuberculosis transmission and interventions.\n\n\n\n\n\n\nRunning tutorials locally\n\n\n\nTo run these tutorials locally:\n\nClone the TBSim repository\nInstall TBSim and its dependencies\nNavigate to the docs/tutorials folder\nLaunch Jupyter: jupyter lab\n\n\n\n\n\n\nBasic TB Simulation: Learn the fundamentals of TB modeling with a simple example\nTBSim Overview: Introduction to TBSim concepts and workflow\n\n\n\n\n\nTB Interventions: Modeling different TB interventions and their impact\nTB-HIV Co-infection: Modeling TB and HIV co-infection dynamics\nTB-HIV Scenarios: Running multiple scenarios for TB-HIV modeling\n\n\n\n\n\nDOTS Implementation: Implementing DOTS (Directly Observed Treatment, Short-course) in TBSim\n\n\n\n\nEach tutorial includes:\n\nComplete code examples that you can run immediately\nStep-by-step explanations of key concepts\nVisualizations to help understand the results\nBest practices for TB modeling\n\n\n\n\nBefore starting these tutorials, make sure you have:\n\nPython 3.9 or higher\nTBSim installed (pip install tbsim)\nBasic familiarity with Python and epidemiological modeling\n\n\n\n\nIf you encounter issues while working through the tutorials:\n\nCheck the User Guide for detailed explanations\nConsult the API Reference for function documentation\nOpen an issue on GitHub\nContact us at info@tbsim.org",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#getting-started",
    "href": "tutorials.html#getting-started",
    "title": "Tutorials",
    "section": "",
    "text": "Basic TB Simulation: Learn the fundamentals of TB modeling with a simple example\nTBSim Overview: Introduction to TBSim concepts and workflow",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#core-features",
    "href": "tutorials.html#core-features",
    "title": "Tutorials",
    "section": "",
    "text": "TB Interventions: Modeling different TB interventions and their impact\nTB-HIV Co-infection: Modeling TB and HIV co-infection dynamics\nTB-HIV Scenarios: Running multiple scenarios for TB-HIV modeling",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#advanced-topics",
    "href": "tutorials.html#advanced-topics",
    "title": "Tutorials",
    "section": "",
    "text": "DOTS Implementation: Implementing DOTS (Directly Observed Treatment, Short-course) in TBSim",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#examples-and-case-studies",
    "href": "tutorials.html#examples-and-case-studies",
    "title": "Tutorials",
    "section": "",
    "text": "Each tutorial includes:\n\nComplete code examples that you can run immediately\nStep-by-step explanations of key concepts\nVisualizations to help understand the results\nBest practices for TB modeling",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#prerequisites",
    "href": "tutorials.html#prerequisites",
    "title": "Tutorials",
    "section": "",
    "text": "Before starting these tutorials, make sure you have:\n\nPython 3.9 or higher\nTBSim installed (pip install tbsim)\nBasic familiarity with Python and epidemiological modeling",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "tutorials.html#need-help",
    "href": "tutorials.html#need-help",
    "title": "Tutorials",
    "section": "",
    "text": "If you encounter issues while working through the tutorials:\n\nCheck the User Guide for detailed explanations\nConsult the API Reference for function documentation\nOpen an issue on GitHub\nContact us at info@tbsim.org",
    "crumbs": [
      "Home",
      "**Tutorials**",
      "**Tutorials**"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TBSim",
    "section": "",
    "text": "Welcome to TBSim\n\n\n\nTBSim is a powerful framework for modeling tuberculosis transmission and interventions using agent-based simulation. Built on top of the Starsim framework, TBSim provides specialized tools for TB modeling while maintaining compatibility with the broader Starsim ecosystem.",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#what-is-tbsim",
    "href": "index.html#what-is-tbsim",
    "title": "TBSim",
    "section": "What is TBSim?",
    "text": "What is TBSim?\nTBSim is an agent-based modeling framework designed specifically for simulating tuberculosis transmission and interventions. It extends the Starsim framework with TB-specific functionality while maintaining full compatibility with the broader Starsim ecosystem.\n\nKey Features\n\nTB-Specific Modeling: Specialized modules for tuberculosis transmission, progression, and treatment\nCo-morbidity Support: Integrated modeling of TB with HIV, malnutrition, and other conditions\nIntervention Analysis: Comprehensive tools for evaluating TB interventions and policies\nCalibration Tools: Built-in calibration methods for fitting models to epidemiological data\nVisualization: Advanced plotting and analysis capabilities\nExtensibility: Easy to extend with custom modules and interventions\n\n\n\nQuick Start\nimport tbsim as tb\nimport starsim as ss\n\n# Create a simple TB simulation\nsim = tb.TBSim(\n    n_agents=1000,\n    duration=365,\n    diseases=[tb.TB()],\n    demographics=[ss.Births(), ss.Deaths()]\n)\n\n# Run the simulation\nsim.run()\n\n# Analyze results\nsim.plot()",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "TBSim",
    "section": "Getting Started",
    "text": "Getting Started\n\nTutorials: Step-by-step guides for common TB modeling tasks\nUser Guide: Comprehensive documentation of TBSim features\nAPI Reference: Detailed API documentation\nExamples: Ready-to-run example simulations",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "TBSim",
    "section": "Installation",
    "text": "Installation\npip install tbsim\nFor development installation:\ngit clone https://github.com/your-org/tbsim.git\ncd tbsim\npip install -e .",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "TBSim",
    "section": "Citation",
    "text": "Citation\nIf you use TBSim in your research, please cite:\n@software{tbsim2024,\n  title={TBSim: Tuberculosis Simulation Framework},\n  author={TBSim Contributors},\n  year={2024},\n  url={https://github.com/your-org/tbsim}\n}",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "TBSim",
    "section": "Contributing",
    "text": "Contributing\nWe welcome contributions! Please see our contributing guide for details on how to get involved.",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#support",
    "href": "index.html#support",
    "title": "TBSim",
    "section": "Support",
    "text": "Support\n\nDocumentation: docs.tbsim.org\nGitHub Issues: github.com/your-org/tbsim/issues\nEmail: info@tbsim.org",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "TBSim",
    "section": "License",
    "text": "License\nTBSim is released under the MIT License. See the LICENSE file for details.",
    "crumbs": [
      "Home",
      "**Home**"
    ]
  },
  {
    "objectID": "references/Related Information.html",
    "href": "references/Related Information.html",
    "title": "TBSim",
    "section": "",
    "text": "Source of information: https://www.pnas.org/doi/full/10.1073/pnas.0901720106\nStates: - Susceptible(S): - Latent Fast (LF): - Latent Slow (LS): - Active Pre-Symtomatic (APS): - Smear-Positive (SP): - Smear-Negative (SN): - Extra-Pulmonary (EP): - Dead (D):\n&lt; in progress … &gt;\n*** Information above is based on https://www.pnas.org/doi/full/10.1073/pnas.0901720106 and EMOD TB model schematic.\n\n\n\n\n\n\n# Additional Information:\n\n\nModeling tuberculosis (TB) using an agent-based technique involves creating a simulation where individual agents (representing people) interact within a defined environment. This approach can capture the complexities of TB spread, including social interactions, movement patterns, and individual health status.\n\n\n## States The eight states commonly used in TB models are:\n\n\n1. Susceptible (S): Individuals who can contract TB. 2. Latent Infection (L): Individuals who have contracted TB but do not show symptoms and are not infectious. 3. Primary Active TB (P): Individuals who develop active TB soon after the initial infection. 4. Secondary Active TB (I): Individuals who develop active TB after a period of latency. 5. Recovered (R): Individuals who have recovered from TB and may have immunity. 6. Failed Treatment (F): Individuals whose treatment for TB was not successful. 7. Relapse (Re): Recovered individuals who relapse back to active TB. 8. Dead (D): Individuals who have died from TB or other causes.\n\n\n## High level tasks Overall the tasks associated to this project should cover some of all of the points listed below. 1. Agent Attributes: - Agents represent individuals in the population. - Each agent should have a state attribute indicating their current TB status (S, L, P, I, R, F, Re, D). - Other attributes include demographic details (gender, age, etc.), health status, social behavior patterns, and history of TB exposure or treatment.\n\n\n1. Transition Rules: - Transitions between states, based on interaction with infectious agents, time since infection, treatment status, and individual health factors have been already defined by Stewart and is available as powerpoint presentation here: (TODO: add link). - For example, susceptible individuals (S) become latently infected (L) upon exposure to primary (P) or secondary (I) active TB cases.\n\n\n1. Environment and Interaction Dynamics: - To model how agents interact in different settings (e.g., home, work, public places) and how these interactions lead to TB transmission. - To consider varying transmission rates in different settings and for different types of active TB (as defined in Stewart’s documentation) - (TODO: Add more context) - TB transmission dynamics should be based on epidemiological data. This includes the likelihood of transmission upon contact, the incubation period, and the duration of infectiousness. - Consider different strains of TB, such as drug-resistant strains, if relevant.\n\n\n1. Disease Progression and Treatment: - Simulate disease progression - To model the progression from latent infection to active TB, considering factors like immune response and co-morbidities. - Include treatment protocols for active TB and their outcomes, influencing transitions to recovered (R) or failed treatment (F). - Each agent follows a disease progression model, which could lead to recovery or worsening of the disease. - Include the effects of treatment, such as shortened infectious periods or cure.\n\n\n1. Incorporating Social Interactions and Movements: - Define how agents interact and move within the environment. This could include daily routines, social gatherings, and travel patterns. - Social networks can be modeled to understand how close contacts influence the spread of TB.\n\n\n1. Incorporating Healthcare System Interactions: - Model the healthcare system’s role, including diagnosis, treatment, and public health interventions. - Include treatment adherence and the possibility of treatment failure.\n\n\n1. Public Health Interventions: - Implement interventions like vaccination, improved diagnosis, treatment strategies, and public health campaigns. - Evaluate the impact of these interventions on the different states and overall TB dynamics. - Model additional interventions, like vaccination, contact tracing, quarantine, or improved healthcare access. - Assess the impact of these interventions on the spread and control of TB.\n\n\n1. Incorporate Relapse and Mortality: - Include the probability of relapse (Re) for recovered individuals. - Model mortality (D) due to TB and other causes, impacting the population dynamics.\n\n\n1. Simulation Execution: - Run simulations with varied parameters to explore different scenarios, such as increased treatment efficacy or changes in social behavior. - Track the prevalence of each state over time and under different intervention strategies. - Run the simulation multiple times with varying parameters to understand different scenarios. - Analyze the results to identify patterns, potential hotspots, and the effectiveness of interventions.\n\n\n1. Data Analysis and Model Validation: - Analyze the distribution and transitions of states over time and compare with real-world data. - Validate the model by ensuring it can replicate known TB epidemiology trends and respond realistically to interventions.\n\n\n1. Calibration and Validation: - Calibrate your model using real-world data to ensure its accuracy. - Validate the model by comparing its predictions with independent data sets or historical data.\n\n\n1. Sensitivity Analysis: - Test the sensitivity of the outcomes to changes in key parameters to understand the robustness of the model’s predictions. - Perform sensitivity analysis to understand how changes in parameters affect the outcomes. This is crucial for understanding the robustness of your model’s predictions.\n\n\n\nEMOD:\n#pragma once\n#include \"InfectionAirborne.h\"\n\n#include \"TBInterventionsContainer.h\"\n#include \"SusceptibilityTB.h\"\n#include \"Infection.h\"\n\nnamespace Kernel\n{\n    // find a home for these...  TBEnums.h?\n    ENUM_DEFINE(TBInfectionDrugResistance,\n        ENUM_VALUE_SPEC(DrugSensitive           , 0)\n        ENUM_VALUE_SPEC(FirstLineResistant      , 1))\n    class IIndividualHumanCoInfection;\n\n    class IInfectionTB : public ISupports\n    {\n    public:\n        virtual bool IsSmearPositive() const = 0;\n        virtual bool IsMDR() const = 0 ; \n        virtual float GetLatentCureRate() const = 0;\n        virtual bool IsSymptomatic() const = 0;\n        virtual bool IsActive() const = 0;\n        virtual bool IsExtrapulmonary() const = 0; \n        virtual bool IsFastProgressor() const = 0;\n        virtual float GetDurationSinceInitialInfection() const = 0; \n        virtual bool EvolvedResistance() const = 0;\n        virtual bool IsPendingRelapse() const = 0;\n        virtual void ExogenousLatentSlowToFast() = 0;\n        virtual void LifeCourseLatencyTimerUpdate() = 0;\n    };\n\n    class InfectionTBConfig : public InfectionAirborneConfig\n    {\n        friend class IndividualTB;\n        GET_SCHEMA_STATIC_WRAPPER(InfectionTBConfig)\n        IMPLEMENT_DEFAULT_REFERENCE_COUNTING()\n        DECLARE_QUERY_INTERFACE()\n\n    public:\n        virtual bool Configure( const Configuration* config ) override;\n        std::map &lt;float,float&gt; GetCD4Map();\n        InfectionStateChange::_enum TB_event_type_associated_with_infectious_timer;\n        \n    protected:\n        friend class InfectionTB;\n        \n        static float TB_latent_cure_rate;\n        static float TB_fast_progressor_rate;\n        static float TB_slow_progressor_rate;\n        static float TB_active_cure_rate;\n        static float TB_inactivation_rate;\n        static float TB_active_mortality_rate;\n        static float TB_extrapulmonary_mortality_multiplier;\n        static float TB_smear_negative_mortality_multiplier;\n        static float TB_active_presymptomatic_infectivity_multiplier;\n        static float TB_presymptomatic_rate;\n        static float TB_presymptomatic_cure_rate;\n        static float TB_smear_negative_infectivity_multiplier;\n        static float TB_Drug_Efficacy_Multiplier_MDR;\n        static float TB_Drug_Efficacy_Multiplier_Failed;\n        static float TB_Drug_Efficacy_Multiplier_Relapsed;\n        static float TB_MDR_Fitness_Multiplier;\n        static std::map &lt;float,float&gt; CD4_map;\n        static float TB_relapsed_to_active_rate;\n        \n        static DistributionFunction::Enum TB_active_period_distribution;\n        static float TB_active_period_std_dev;\n\n        static vector &lt;float&gt; TB_cd4_activation_vec;\n        static vector &lt;float&gt; CD4_strata_act_vec;\n        static IDistribution* p_infectious_timer_distribution;\n    };\n\n    //---------------------------- InfectionTB ----------------------------------------\n    class InfectionTB : public InfectionAirborne, public IInfectionTB\n    {\n        IMPLEMENT_DEFAULT_REFERENCE_COUNTING()\n        DECLARE_QUERY_INTERFACE()\n\n    public:\n        virtual ~InfectionTB(void);\n        static InfectionTB *CreateInfection(IIndividualHumanContext *context, suids::suid _suid);\n\n        virtual void SetParameters(IStrainIdentity* infstrain=nullptr, int incubation_period_override = -1) override;\n        virtual void Update(float dt, ISusceptibilityContext* immunity = nullptr) override;\n        virtual void InitInfectionImmunology(ISusceptibilityContext* _immunity) override;\n        virtual void SetContextTo(IIndividualHumanContext * context) override;\n        \n       // Inherited from base class\n        virtual bool IsActive() const override;\n\n        //TB-specific\n        virtual bool IsSmearPositive() const override;\n        virtual bool IsExtrapulmonary() const override;\n        virtual bool IsFastProgressor() const override;\n        virtual bool IsMDR() const override;\n        virtual bool EvolvedResistance() const override;\n        virtual bool IsPendingRelapse() const override;\n        virtual bool IsSymptomatic() const override;\n        virtual float GetLatentCureRate() const override;\n        virtual float GetDurationSinceInitialInfection() const override; \n        virtual void LifeCourseLatencyTimerUpdate() override;\n\n        // Exogenous re-infection\n        virtual void ModifyInfectionStrain(IStrainIdentity * exog_strain_id);\n        virtual void ExogenousLatentSlowToFast();\n\n    protected:\n        InfectionTB();\n        InfectionTB(IIndividualHumanContext *context);\n\n        // For disease progression and MDR evolution, virtual functions are inherited from base class Infection\n        virtual void Initialize(suids::suid _suid);\n        void  InitializeLatentInfection(ISusceptibilityContext* immunity);\n        void  InitializeActivePresymptomaticInfection(ISusceptibilityContext* immunity);\n        void  InitializeActiveInfection(ISusceptibilityContext* immunity);\n        void  InitializePendingRelapse(ISusceptibilityContext* immunity);\n        bool  ApplyDrugEffects(float dt, ISusceptibilityContext* immunity = nullptr);\n        virtual void EvolveStrain(ISusceptibilityContext* _immunity, float dt) override;\n        TBDrugEffects_t GetTotalDrugEffectsForThisInfection();\n        float CalculateTimerAgeDepSlowProgression(ISusceptibilityContext* immunity);\n\n        // additional TB infection members\n        // This chunk gets serialized.\n\n        IIndividualHumanCoInfection* human_coinf;\n        bool  m_is_active;\n        float m_recover_fraction;\n        float m_death_fraction;\n        bool  m_is_smear_positive;\n        bool  m_is_extrapulmonary;\n        bool  m_is_fast_progressor;\n        bool  m_evolved_resistance;\n        bool  m_is_pending_relapse;\n        bool  m_shows_symptoms;\n        float m_duration_since_init_infection; //for reporting only\n\n        DECLARE_SERIALIZABLE(InfectionTB);\n    };\n}"
  },
  {
    "objectID": "THEME_SWITCH.html",
    "href": "THEME_SWITCH.html",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "This documentation site includes a theme switch that allows users to toggle between light and dark themes.\n\n\n\nToggle Switch: A moon icon (🌙) with a toggle switch in the top navigation bar\nPersistent Storage: Theme preference is saved in localStorage and persists across browser sessions\nSystem Theme Detection: Automatically detects and applies the user’s system theme preference (if no manual preference is set)\nResponsive Design: The theme switch adapts to different screen sizes\nSmooth Transitions: CSS transitions provide smooth theme switching animations\n\n\n\n\n\nToggle Theme: Click the moon icon (🌙) or the toggle switch in the top navigation bar\nAutomatic Persistence: Your theme choice is automatically saved and will be remembered on future visits\nSystem Preference: If you haven’t manually set a theme, the site will automatically match your system’s light/dark mode preference\n\n\n\n\n\n\n\ndocs/_static/theme-switch.css - CSS styles for the theme switch and dark/light theme variants\ndocs/_static/theme-switch.js - JavaScript functionality for theme switching and persistence\ndocs/_templates/layout.html - Custom layout template that includes the theme switch\ndocs/_templates/nav.html - Custom navigation template with theme switch positioning\n\n\n\n\nThe theme switch is configured in docs/conf.py:\n# Custom CSS and JS files\nhtml_css_files = [\n    'theme-switch.css',\n]\n\nhtml_js_files = [\n    'theme-switch.js',\n]\n\n\n\nThe theme system uses CSS custom properties (variables) for consistent theming:\nLight Theme (default): - --bg-color: #ffffff - --text-color: #333333 - --link-color: #2980b9 - --code-bg: #f5f5f5 - --border-color: #ddd\nDark Theme: - --bg-color: #1a1a1a - --text-color: #e0e0e0 - --link-color: #4fc3f7 - --code-bg: #2d2d2d - --border-color: #444\n\n\n\nThe theme switch exposes a global API for programmatic control:\n// Set theme\nwindow.themeSwitch.setTheme('dark'); // or 'light'\n\n// Get current theme\nconst currentTheme = window.themeSwitch.getTheme();\n\n// Toggle between themes\nwindow.themeSwitch.toggle();\n\n\n\n\n\n\nTo modify the theme colors, edit the CSS variables in docs/_static/theme-switch.css:\n[data-theme=\"dark\"] {\n    --bg-color: #your-dark-bg-color;\n    --text-color: #your-dark-text-color;\n    /* ... other variables */\n}\n\n\n\nTo move the theme switch to a different location, modify the positioning in docs/_templates/nav.html or update the JavaScript positioning logic in docs/_static/theme-switch.js.\n\n\n\nTo style additional elements for dark mode, add CSS rules to the [data-theme=\"dark\"] section in docs/_static/theme-switch.css.\n\n\n\n\nThe theme switch requires: - Modern browsers with CSS custom properties support - JavaScript enabled - localStorage support for persistence\n\n\n\nIf the theme switch doesn’t appear: 1. Ensure the static files are properly built (make html) 2. Check that the CSS and JS files are included in the HTML output 3. Verify that the templates are being used correctly\nIf themes don’t persist: 1. Check that localStorage is enabled in the browser 2. Ensure JavaScript is enabled 3. Check browser console for any JavaScript errors"
  },
  {
    "objectID": "THEME_SWITCH.html#features",
    "href": "THEME_SWITCH.html#features",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "Toggle Switch: A moon icon (🌙) with a toggle switch in the top navigation bar\nPersistent Storage: Theme preference is saved in localStorage and persists across browser sessions\nSystem Theme Detection: Automatically detects and applies the user’s system theme preference (if no manual preference is set)\nResponsive Design: The theme switch adapts to different screen sizes\nSmooth Transitions: CSS transitions provide smooth theme switching animations"
  },
  {
    "objectID": "THEME_SWITCH.html#how-to-use",
    "href": "THEME_SWITCH.html#how-to-use",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "Toggle Theme: Click the moon icon (🌙) or the toggle switch in the top navigation bar\nAutomatic Persistence: Your theme choice is automatically saved and will be remembered on future visits\nSystem Preference: If you haven’t manually set a theme, the site will automatically match your system’s light/dark mode preference"
  },
  {
    "objectID": "THEME_SWITCH.html#technical-implementation",
    "href": "THEME_SWITCH.html#technical-implementation",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "docs/_static/theme-switch.css - CSS styles for the theme switch and dark/light theme variants\ndocs/_static/theme-switch.js - JavaScript functionality for theme switching and persistence\ndocs/_templates/layout.html - Custom layout template that includes the theme switch\ndocs/_templates/nav.html - Custom navigation template with theme switch positioning\n\n\n\n\nThe theme switch is configured in docs/conf.py:\n# Custom CSS and JS files\nhtml_css_files = [\n    'theme-switch.css',\n]\n\nhtml_js_files = [\n    'theme-switch.js',\n]\n\n\n\nThe theme system uses CSS custom properties (variables) for consistent theming:\nLight Theme (default): - --bg-color: #ffffff - --text-color: #333333 - --link-color: #2980b9 - --code-bg: #f5f5f5 - --border-color: #ddd\nDark Theme: - --bg-color: #1a1a1a - --text-color: #e0e0e0 - --link-color: #4fc3f7 - --code-bg: #2d2d2d - --border-color: #444\n\n\n\nThe theme switch exposes a global API for programmatic control:\n// Set theme\nwindow.themeSwitch.setTheme('dark'); // or 'light'\n\n// Get current theme\nconst currentTheme = window.themeSwitch.getTheme();\n\n// Toggle between themes\nwindow.themeSwitch.toggle();"
  },
  {
    "objectID": "THEME_SWITCH.html#customization",
    "href": "THEME_SWITCH.html#customization",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "To modify the theme colors, edit the CSS variables in docs/_static/theme-switch.css:\n[data-theme=\"dark\"] {\n    --bg-color: #your-dark-bg-color;\n    --text-color: #your-dark-text-color;\n    /* ... other variables */\n}\n\n\n\nTo move the theme switch to a different location, modify the positioning in docs/_templates/nav.html or update the JavaScript positioning logic in docs/_static/theme-switch.js.\n\n\n\nTo style additional elements for dark mode, add CSS rules to the [data-theme=\"dark\"] section in docs/_static/theme-switch.css."
  },
  {
    "objectID": "THEME_SWITCH.html#browser-support",
    "href": "THEME_SWITCH.html#browser-support",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "The theme switch requires: - Modern browsers with CSS custom properties support - JavaScript enabled - localStorage support for persistence"
  },
  {
    "objectID": "THEME_SWITCH.html#troubleshooting",
    "href": "THEME_SWITCH.html#troubleshooting",
    "title": "Theme Switch Documentation",
    "section": "",
    "text": "If the theme switch doesn’t appear: 1. Ensure the static files are properly built (make html) 2. Check that the CSS and JS files are included in the HTML output 3. Verify that the templates are being used correctly\nIf themes don’t persist: 1. Check that localStorage is enabled in the browser 2. Ensure JavaScript is enabled 3. Check browser console for any JavaScript errors"
  },
  {
    "objectID": "user_guide.html",
    "href": "user_guide.html",
    "title": "User Guide",
    "section": "",
    "text": "This user guide provides comprehensive documentation for TBSim, covering all aspects of the framework from basic concepts to advanced usage.\n\n\n\n\n\n\nNote\n\n\n\nYou can download these guides as Jupyter notebooks to run them locally. Look for the download button at the top of each guide.\n\n\n\n\n\n\n\n\nRunning guides locally\n\n\n\nTo run these guides locally:\n\nClone the TBSim repository\nInstall TBSim and its dependencies\nNavigate to the docs/user_guide folder\nLaunch Jupyter: jupyter lab\n\n\n\n\n\n\nIntroduction to TBSim: Overview of TBSim and its relationship to Starsim\nTBSim Architecture: Understanding the core architecture and design principles\n\n\n\n\n\nUnderstanding the Model: Core concepts of agent-based TB modeling\nThe Sim Object: Working with TBSim simulation objects\nParameter Configuration: Setting up and managing simulation parameters\n\n\n\n\n\nDiseases: TB disease modeling and progression\nNetworks: Transmission networks and contact patterns\nDemographics: Population dynamics and demographics\nInterventions: TB interventions and treatment strategies\nAnalyzers: Analysis and visualization tools\n\n\n\n\n\nRunning Simulations: How to set up and run TB simulations\nCalibration: Calibrating models to epidemiological data\nScenario Analysis: Running and comparing multiple scenarios\nResults Analysis: Analyzing and interpreting simulation results\n\n\n\n\n\nCo-morbidities: Modeling TB with other conditions (HIV, malnutrition)\nCustom Interventions: Creating custom intervention strategies\nPerformance Optimization: Optimizing simulation performance\nExtending TBSim: Adding custom modules and functionality\n\n\n\n\n\nModel Design: Best practices for designing TB models\nParameter Estimation: Guidelines for parameter estimation\nValidation: Model validation and verification\nDocumentation: Documenting your models and results\n\n\n\n\n\nCommon Issues: Solutions to common problems\nPerformance Issues: Addressing performance problems\nDebugging: Debugging techniques for TBSim models\n\n\n\n\n\nAPI Reference: Complete API documentation\nConfiguration Options: All configuration options\nFile Formats: Supported input and output formats",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#introduction",
    "href": "user_guide.html#introduction",
    "title": "User Guide",
    "section": "",
    "text": "Introduction to TBSim: Overview of TBSim and its relationship to Starsim\nTBSim Architecture: Understanding the core architecture and design principles",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#basics",
    "href": "user_guide.html#basics",
    "title": "User Guide",
    "section": "",
    "text": "Understanding the Model: Core concepts of agent-based TB modeling\nThe Sim Object: Working with TBSim simulation objects\nParameter Configuration: Setting up and managing simulation parameters",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#modules",
    "href": "user_guide.html#modules",
    "title": "User Guide",
    "section": "",
    "text": "Diseases: TB disease modeling and progression\nNetworks: Transmission networks and contact patterns\nDemographics: Population dynamics and demographics\nInterventions: TB interventions and treatment strategies\nAnalyzers: Analysis and visualization tools",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#workflows",
    "href": "user_guide.html#workflows",
    "title": "User Guide",
    "section": "",
    "text": "Running Simulations: How to set up and run TB simulations\nCalibration: Calibrating models to epidemiological data\nScenario Analysis: Running and comparing multiple scenarios\nResults Analysis: Analyzing and interpreting simulation results",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#advanced-topics",
    "href": "user_guide.html#advanced-topics",
    "title": "User Guide",
    "section": "",
    "text": "Co-morbidities: Modeling TB with other conditions (HIV, malnutrition)\nCustom Interventions: Creating custom intervention strategies\nPerformance Optimization: Optimizing simulation performance\nExtending TBSim: Adding custom modules and functionality",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#best-practices",
    "href": "user_guide.html#best-practices",
    "title": "User Guide",
    "section": "",
    "text": "Model Design: Best practices for designing TB models\nParameter Estimation: Guidelines for parameter estimation\nValidation: Model validation and verification\nDocumentation: Documenting your models and results",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#troubleshooting",
    "href": "user_guide.html#troubleshooting",
    "title": "User Guide",
    "section": "",
    "text": "Common Issues: Solutions to common problems\nPerformance Issues: Addressing performance problems\nDebugging: Debugging techniques for TBSim models",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "user_guide.html#reference",
    "href": "user_guide.html#reference",
    "title": "User Guide",
    "section": "",
    "text": "API Reference: Complete API documentation\nConfiguration Options: All configuration options\nFile Formats: Supported input and output formats",
    "crumbs": [
      "Home",
      "**User Guide**",
      "**User guide**"
    ]
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html",
    "href": "tutorials/comprehensive_analyzer_plots_example.html",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "",
    "text": "This notebook demonstrates all available plotting methods in the DwtAnalyzer class from the tbsim package. It is adapted from the original Python script for interactive exploration.\nimport tbsim as mtb\nimport starsim as ss\nimport sciris as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nTBS = mtb.TBS\n\n/Users/mine/git/tbdocs/venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#build-a-tb-simulation-with-dwell-time-analyzer",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#build-a-tb-simulation-with-dwell-time-analyzer",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "Build a TB simulation with dwell time analyzer",
    "text": "Build a TB simulation with dwell time analyzer\n\ndef build_tbsim(sim_pars=None):\n    sim_params = dict(\n        start = sc.date('2013-01-01'),\n        stop = sc.date('2016-12-31'),\n        rand_seed=123,\n        \n        dt=ss.days(7),\n    )\n    if sim_pars is not None:\n        sim_params.update(sim_pars)\n    pop = ss.People(n_agents=1000)\n    tb_params = dict(\n        beta=ss.per(0.0025),\n        init_prev=ss.bernoulli(p=0.25),\n        rel_sus_latentslow=0.1,\n        \n    )\n    tb = mtb.TB(tb_params)\n    net = ss.RandomNet(dict(n_contacts=ss.poisson(lam=5), dur=0))\n    dwell_analyzer = mtb.DwtAnalyzer(adjust_to_unit=True, unit=1.0, scenario_name='comprehensive_plots_example')\n    sim = ss.Sim(\n        people=pop,\n        networks=net,\n        diseases=tb,\n        pars=sim_params,\n        analyzers=dwell_analyzer,\n    )\n    sim.pars.verbose = 30/365\n    return sim"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#run-the-simulation-and-extract-the-analyzer",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#run-the-simulation-and-extract-the-analyzer",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "Run the simulation and extract the analyzer",
    "text": "Run the simulation and extract the analyzer\n\nprint(\"Building and running TB simulation...\")\nsim_tb = build_tbsim()\nsim_tb.run()\nanalyzer = sim_tb.analyzers[0]\n\nBuilding and running TB simulation...\nNo dwell time data available to plot.\nNo data provided, or data is corrupted\nInitializing sim with 1000 agents\n  Running 2013.01.01 ( 0/209) (0.00 s)  ———————————————————— 0%\n  Running 2013.03.26 (12/209) (0.03 s)  •——————————————————— 6%\n  Running 2013.06.18 (24/209) (0.06 s)  ••—————————————————— 12%\n  Running 2013.09.10 (36/209) (0.09 s)  •••————————————————— 18%\n  Running 2013.12.03 (48/209) (0.11 s)  ••••———————————————— 23%\n  Running 2014.02.25 (60/209) (0.14 s)  •••••——————————————— 29%\n  Running 2014.05.20 (72/209) (0.16 s)  ••••••—————————————— 35%\n  Running 2014.08.12 (84/209) (0.19 s)  ••••••••———————————— 41%\n  Running 2014.11.04 (96/209) (0.21 s)  •••••••••——————————— 46%\n  Running 2015.01.27 (108/209) (0.24 s)  ••••••••••—————————— 52%\n  Running 2015.04.21 (120/209) (0.27 s)  •••••••••••————————— 58%\n  Running 2015.07.14 (132/209) (0.29 s)  ••••••••••••———————— 64%\n  Running 2015.10.06 (144/209) (0.32 s)  •••••••••••••——————— 69%\n  Running 2015.12.29 (156/209) (0.36 s)  •••••••••••••••————— 75%\n  Running 2016.03.22 (168/209) (0.39 s)  ••••••••••••••••———— 81%\n  Running 2016.06.14 (180/209) (0.42 s)  •••••••••••••••••——— 87%\n  Running 2016.09.06 (192/209) (0.45 s)  ••••••••••••••••••—— 92%\n  Running 2016.11.29 (204/209) (0.48 s)  •••••••••••••••••••— 98%\n===&gt; Dwell time logs saved to:\n /Users/mine/git/tbdocs/docs/tutorials/results/comprehensiveplotsexample-0728103312.csv"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#sankey-diagrams",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#sankey-diagrams",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "1. Sankey Diagrams",
    "text": "1. Sankey Diagrams\nDemonstrate Sankey diagrams for state transitions.\n\n# Basic Sankey diagram for all agents\nanalyzer.sankey_agents()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n# Sankey diagram with dwell times\nanalyzer.sankey_dwelltimes(subtitle=\"State Transitions with Dwell Times\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n# Sankey diagrams by age groups\nanalyzer.sankey_agents_by_age_subplots(bins=[0, 5, 15, 30, 50, 200], scenario=\"Age-stratified Analysis\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n# Sankey diagrams with even age ranges\nanalyzer.sankey_agents_even_age_ranges(number_of_plots=3, scenario=\"Even Age Distribution\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#network-graphs",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#network-graphs",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "2. Network Graphs",
    "text": "2. Network Graphs\nVisualize state transition networks.\n\nanalyzer.graph_state_transitions(subtitle=\"State Transition Network\", colormap='tab20')\n\n\n\n\n\n\n\n\n\n\nanalyzer.graph_state_transitions_curved(subtitle=\"Curved State Transitions\", colormap='plasma')\n\n&lt;Figure size 1500x1000 with 0 Axes&gt;"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#histograms-and-distributions",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#histograms-and-distributions",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "3. Histograms and Distributions",
    "text": "3. Histograms and Distributions\nExplore dwell time distributions.\n\nhelp(analyzer.histogram_with_kde)\n\n\nHelp on method histogram_with_kde in module tbsim.analyzers:\n\nhistogram_with_kde(subtitle='') method of tbsim.analyzers.DwtAnalyzer instance\n    Create histograms with kernel density estimation for dwell time distributions.\n\n    Generates a multi-panel visualization showing the distribution of dwell\n    times for each state, including both histograms and kernel density\n    estimation curves. This provides both discrete and continuous views\n    of the dwell time distributions.\n\n    Mathematical Model:\n        For each state i:\n        - Extract dwell times: T_i = {dwell_time for state i}\n        - Create histogram: H_i(bin) = count(T_i in bin)\n        - Calculate KDE: KDE_i(t) = Σ(K(t-t_j, h)) / (n*h)\n            where K is kernel function, h is bandwidth, n = |T_i|\n        - Plot: histogram + KDE curve\n\n    Args:\n        subtitle (str): Additional subtitle for the plot\n\n    Returns:\n        None: Displays matplotlib subplot figure\n\n    Example:\n    ```python\n    plotter = DwtPlotter(file_path='data.csv')\n\n    # Analyze dwell time distributions\n    plotter.histogram_with_kde(subtitle=\"Distribution Analysis\")\n    ```\n\n    Features:\n    - Multi-panel layout (4 columns)\n    - Histogram + KDE visualization\n    - State-specific analysis\n    - Automatic bin sizing\n    - Professional styling with legends"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#interactive-bar-charts",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#interactive-bar-charts",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "4. Interactive Bar Charts",
    "text": "4. Interactive Bar Charts\nInteractive bar charts for state transitions and reinfections.\n\nanalyzer.barchar_all_state_transitions_interactive(\n    dwell_time_bins=[0, 30, 90, 180, 365, float('inf')],\n    filter_states=['-1.0.None', '0.0.Latent Slow', '1.0.Latent Fast', '2.0.Active Presymp']\n)\n\n\n\n---------------------------------------------------------------------------\nOverflowError                             Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 analyzer.barchar_all_state_transitions_interactive(\n      2     dwell_time_bins=[0, 30, 90, 180, 365, float('inf')],\n      3     filter_states=['-1.0.None', '0.0.Latent Slow', '1.0.Latent Fast', '2.0.Active Presymp']\n      4 )\n\nFile ~/git/tbdocs/tbsim/analyzers.py:596, in DwtPlotter.barchar_all_state_transitions_interactive(self, dwell_time_bins, filter_states)\n    592 dwell_time_bins.append(np.inf)\n    594 # Create bin labels, handling infinity separately\n    595 dwell_time_labels = [\n--&gt; 596     f\"{int(b)}-{int(d)} step_time_units\" if d != np.inf else f\"{int(b)}+ step_time_units\"\n    597     for b, d in zip(dwell_time_bins[:-1], dwell_time_bins[1:])\n    598 ]\n    600 # Create a dwell time category column\n    601 self.data['dwell_time_category'] = pd.cut(\n    602     self.data['dwell_time'],\n    603     bins=dwell_time_bins,\n    604     labels=dwell_time_labels,\n    605     include_lowest=True\n    606 )\n\nOverflowError: cannot convert float infinity to integer\n\n\n\n\n\nanalyzer.reinfections_age_bins_bars_interactive(\n    target_states=[0.0, 1.0],\n    barmode='group',\n    scenario=\"Age-stratified Reinfection Analysis\"\n)\n\n\nanalyzer.reinfections_percents_bars_interactive(\n    target_states=[0.0, 1.0],\n    scenario=\"Population Reinfection Analysis\"\n)\n\nanalyzer.reinfections_bystates_bars_interactive(\n    target_states=[0.0, 1.0],\n    scenario=\"State Transition Reinfection Analysis\",\n    barmode='group'\n)"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#stacked-bar-charts",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#stacked-bar-charts",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "5. Stacked Bar Charts",
    "text": "5. Stacked Bar Charts\nStacked bar charts for cumulative time and dwell time analysis.\n\nanalyzer.stacked_bars_states_per_agent_static()\nanalyzer.stackedbars_dwelltime_state_interactive(bin_size=5, num_bins=15)\nanalyzer.stackedbars_subplots_state_transitions(bin_size=2, num_bins=25)"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#custom-transition-analysis",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#custom-transition-analysis",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "6. Custom Transition Analysis",
    "text": "6. Custom Transition Analysis\nCustom transition subplots.\n\ncustom_transitions = {\n    '-1.0.None': ['0.0.Latent Slow', '1.0.Latent Fast'],\n    '0.0.Latent Slow': ['2.0.Active Presymp', '-1.0.None'],\n    '1.0.Latent Fast': ['2.0.Active Presymp', '-1.0.None']\n}\nanalyzer.subplot_custom_transitions(transitions_dict=custom_transitions)"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#survival-analysis",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#survival-analysis",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "7. Survival Analysis",
    "text": "7. Survival Analysis\nKaplan-Meier survival curve for dwell times.\n\nanalyzer.plot_kaplan_meier(dwell_time_col='dwell_time')"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#using-dwtplotter-directly",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#using-dwtplotter-directly",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "8. Using DwtPlotter Directly",
    "text": "8. Using DwtPlotter Directly\nDemonstrate additional plots using the DwtPlotter class.\n\nfile_path = analyzer.file_path\nprint(f'Generated data file: {file_path}')\nplotter = mtb.DwtPlotter(file_path=file_path)\nplotter.histogram_with_kde(subtitle=\"From Generated File\")\nplotter.sankey_agents(subtitle=\"From Generated File\")"
  },
  {
    "objectID": "tutorials/comprehensive_analyzer_plots_example.html#post-processor-demonstration",
    "href": "tutorials/comprehensive_analyzer_plots_example.html#post-processor-demonstration",
    "title": "Comprehensive Analyzer Plots Example",
    "section": "9. Post Processor Demonstration",
    "text": "9. Post Processor Demonstration\nExample usage of the DwtPostProcessor for multiple simulation results. (This is informational; actual usage requires multiple result files.)\n\n# Example usage (commented out):\n# postproc = mtb.DwtPostProcessor(directory='results', prefix='Baseline')\n# postproc.sankey_agents(subtitle=\"Aggregated Results\")\n# postproc.histogram_with_kde(subtitle=\"Aggregated Distributions\")\n# postproc.reinfections_percents_bars_interactive(\n#     target_states=[0.0, 1.0],\n#     scenario=\"Aggregated Reinfection Analysis\"\n# )"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html",
    "href": "tutorials/README_comprehensive_analyzer_plots.html",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "This script demonstrates all available plotting methods in the DwtAnalyzer class from the TB simulation module. The analyzer provides comprehensive tools for analyzing and visualizing dwell time data from tuberculosis simulation runs.\n\n\nThe DwtAnalyzer class offers three main categories of functionality:\n\nDwtAnalyzer: Records dwell times during simulation execution\nDwtPlotter: Creates various visualizations of dwell time data\n\nDwtPostProcessor: Aggregates and processes multiple simulation results\n\n\n\n\n\n\nSankey diagrams show the flow of agents between different states with the width of the flow representing the number of agents.\n\nsankey_agents(subtitle=\"\"): Basic Sankey diagram for all agents\nsankey_dwelltimes(subtitle=''): Sankey diagram with dwell time information\nsankey_agents_by_age_subplots(bins, scenario, includecycles): Sankey diagrams stratified by age groups\nsankey_agents_even_age_ranges(number_of_plots, scenario): Sankey diagrams with evenly distributed age ranges\n\n\n\n\nNetwork graphs visualize state transitions as directed graphs with statistical annotations.\n\ngraph_state_transitions(states, subtitle, layout, colormap, onlymodel): Basic state transition network\ngraph_state_transitions_curved(states, subtitle, layout, curved_ratio, colormap, onlymodel, graphseed): Curved network graph with edge thickness proportional to agent count\n\n\n\n\nDistribution analysis tools for understanding dwell time patterns.\n\nhistogram_with_kde(subtitle=\"\"): Histogram with kernel density estimation for dwell time distributions\nplot_dwell_time_validation(): Static histogram validation plot for dwell time distributions\nplot_dwell_time_validation_interactive(): Interactive histogram validation plot\n\n\n\n\nInteractive Plotly-based visualizations for detailed analysis.\n\nbarchar_all_state_transitions_interactive(dwell_time_bins, filter_states): Interactive bar chart of all state transitions grouped by dwell time categories\nreinfections_age_bins_bars_interactive(target_states, barmode, scenario): Interactive reinfection analysis by age groups\nreinfections_percents_bars_interactive(target_states, scenario): Interactive reinfection percentages across population\nreinfections_bystates_bars_interactive(target_states, scenario, barmode): Interactive reinfection analysis by state transitions\n\n\n\n\nStacked visualizations showing cumulative time and transition patterns.\n\nstacked_bars_states_per_agent_static(): Static stacked bar chart showing cumulative dwell time per agent\nstackedbars_dwelltime_state_interactive(bin_size, num_bins): Interactive stacked bar charts of dwell times by state\nstackedbars_subplots_state_transitions(bin_size, num_bins): Subplot stacked bar charts for state transitions by dwell time\n\n\n\n\nSpecialized analysis for specific state transition patterns.\n\nsubplot_custom_transitions(transitions_dict): Plot cumulative distribution of dwell times for custom state transitions\n\n\n\n\nSurvival analysis tools for understanding state persistence.\n\nplot_kaplan_meier(dwell_time_col, event_observed_col): Kaplan-Meier survival curve for dwell time analysis\n\n\n\n\n\n\n\ncd scripts\npython comprehensive_analyzer_plots_example.py\n\n\n\nimport tbsim as mtb\nimport starsim as ss\n\n# 1. Create simulation with analyzer\nsim = ss.Sim(diseases=[mtb.TB()])\nanalyzer = mtb.DwtAnalyzer(scenario_name=\"MyAnalysis\")\nsim.add_analyzer(analyzer)\nsim.run()\n\n# 2. Generate plots\nanalyzer.sankey_agents(subtitle=\"State Transitions\")\nanalyzer.histogram_with_kde(subtitle=\"Dwell Time Analysis\")\nanalyzer.graph_state_transitions_curved(subtitle=\"Network Analysis\")\n\n# 3. Access generated data file\nfile_path = analyzer.file_path\nprint(f\"Data saved to: {file_path}\")\n\n\n\nfrom tbsim.analyzers import DwtPlotter\n\n# Analyze existing data file\nplotter = DwtPlotter(file_path='results/my_simulation.csv')\nplotter.sankey_agents()\nplotter.histogram_with_kde()\n\n\n\nfrom tbsim.analyzers import DwtPostProcessor\n\n# Aggregate multiple simulation results\npostproc = DwtPostProcessor(directory='results', prefix='Baseline')\npostproc.sankey_agents(subtitle=\"Aggregated Results\")\npostproc.histogram_with_kde(subtitle=\"Aggregated Distributions\")\n\n\n\n\n\n\n\nTracks dwell times during simulation execution\nRecords state transitions with timing information\nCaptures agent demographics and reinfection patterns\n\n\n\n\n\nStatic plots: Matplotlib-based for publication quality\nInteractive plots: Plotly-based for exploration\nNetwork visualizations: NetworkX-based for complex relationships\nStatistical analysis: Survival curves and distribution fitting\n\n\n\n\n\nAutomatically saves data to CSV files\nSupports post-processing of multiple simulation runs\nEnables batch analysis across different scenarios\n\n\n\n\n\nConfigurable color schemes and layouts\nAdjustable bin sizes and time ranges\nFilterable state selections\nCustom transition definitions\n\n\n\n\n\nThe analyzer generates: 1. CSV data file: Contains all dwell time and transition data 2. Interactive plots: Displayed in browser or notebook 3. Static plots: Saved as matplotlib figures 4. Network graphs: Visualized state transition networks\n\n\n\nRequired packages: - tbsim: TB simulation framework - starsim: Agent-based simulation framework - plotly: Interactive visualizations - matplotlib: Static plotting - networkx: Network graph visualizations - pandas: Data manipulation - numpy: Numerical computations - scipy: Statistical functions - lifelines: Survival analysis\n\n\n\nThe comprehensive example will generate: - 8+ different types of Sankey diagrams - 2 network graph visualizations - 3 histogram/distribution plots - 4 interactive bar charts - 3 stacked bar chart variations - 1 custom transition analysis - 1 survival curve - Additional plots using the DwtPlotter directly\nEach plot type provides different insights into the TB simulation dynamics, from high-level state transition patterns to detailed agent-level analysis."
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#overview",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#overview",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "The DwtAnalyzer class offers three main categories of functionality:\n\nDwtAnalyzer: Records dwell times during simulation execution\nDwtPlotter: Creates various visualizations of dwell time data\n\nDwtPostProcessor: Aggregates and processes multiple simulation results"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#available-plot-types",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#available-plot-types",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "Sankey diagrams show the flow of agents between different states with the width of the flow representing the number of agents.\n\nsankey_agents(subtitle=\"\"): Basic Sankey diagram for all agents\nsankey_dwelltimes(subtitle=''): Sankey diagram with dwell time information\nsankey_agents_by_age_subplots(bins, scenario, includecycles): Sankey diagrams stratified by age groups\nsankey_agents_even_age_ranges(number_of_plots, scenario): Sankey diagrams with evenly distributed age ranges\n\n\n\n\nNetwork graphs visualize state transitions as directed graphs with statistical annotations.\n\ngraph_state_transitions(states, subtitle, layout, colormap, onlymodel): Basic state transition network\ngraph_state_transitions_curved(states, subtitle, layout, curved_ratio, colormap, onlymodel, graphseed): Curved network graph with edge thickness proportional to agent count\n\n\n\n\nDistribution analysis tools for understanding dwell time patterns.\n\nhistogram_with_kde(subtitle=\"\"): Histogram with kernel density estimation for dwell time distributions\nplot_dwell_time_validation(): Static histogram validation plot for dwell time distributions\nplot_dwell_time_validation_interactive(): Interactive histogram validation plot\n\n\n\n\nInteractive Plotly-based visualizations for detailed analysis.\n\nbarchar_all_state_transitions_interactive(dwell_time_bins, filter_states): Interactive bar chart of all state transitions grouped by dwell time categories\nreinfections_age_bins_bars_interactive(target_states, barmode, scenario): Interactive reinfection analysis by age groups\nreinfections_percents_bars_interactive(target_states, scenario): Interactive reinfection percentages across population\nreinfections_bystates_bars_interactive(target_states, scenario, barmode): Interactive reinfection analysis by state transitions\n\n\n\n\nStacked visualizations showing cumulative time and transition patterns.\n\nstacked_bars_states_per_agent_static(): Static stacked bar chart showing cumulative dwell time per agent\nstackedbars_dwelltime_state_interactive(bin_size, num_bins): Interactive stacked bar charts of dwell times by state\nstackedbars_subplots_state_transitions(bin_size, num_bins): Subplot stacked bar charts for state transitions by dwell time\n\n\n\n\nSpecialized analysis for specific state transition patterns.\n\nsubplot_custom_transitions(transitions_dict): Plot cumulative distribution of dwell times for custom state transitions\n\n\n\n\nSurvival analysis tools for understanding state persistence.\n\nplot_kaplan_meier(dwell_time_col, event_observed_col): Kaplan-Meier survival curve for dwell time analysis"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#usage",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#usage",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "cd scripts\npython comprehensive_analyzer_plots_example.py\n\n\n\nimport tbsim as mtb\nimport starsim as ss\n\n# 1. Create simulation with analyzer\nsim = ss.Sim(diseases=[mtb.TB()])\nanalyzer = mtb.DwtAnalyzer(scenario_name=\"MyAnalysis\")\nsim.add_analyzer(analyzer)\nsim.run()\n\n# 2. Generate plots\nanalyzer.sankey_agents(subtitle=\"State Transitions\")\nanalyzer.histogram_with_kde(subtitle=\"Dwell Time Analysis\")\nanalyzer.graph_state_transitions_curved(subtitle=\"Network Analysis\")\n\n# 3. Access generated data file\nfile_path = analyzer.file_path\nprint(f\"Data saved to: {file_path}\")\n\n\n\nfrom tbsim.analyzers import DwtPlotter\n\n# Analyze existing data file\nplotter = DwtPlotter(file_path='results/my_simulation.csv')\nplotter.sankey_agents()\nplotter.histogram_with_kde()\n\n\n\nfrom tbsim.analyzers import DwtPostProcessor\n\n# Aggregate multiple simulation results\npostproc = DwtPostProcessor(directory='results', prefix='Baseline')\npostproc.sankey_agents(subtitle=\"Aggregated Results\")\npostproc.histogram_with_kde(subtitle=\"Aggregated Distributions\")"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#key-features",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#key-features",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "Tracks dwell times during simulation execution\nRecords state transitions with timing information\nCaptures agent demographics and reinfection patterns\n\n\n\n\n\nStatic plots: Matplotlib-based for publication quality\nInteractive plots: Plotly-based for exploration\nNetwork visualizations: NetworkX-based for complex relationships\nStatistical analysis: Survival curves and distribution fitting\n\n\n\n\n\nAutomatically saves data to CSV files\nSupports post-processing of multiple simulation runs\nEnables batch analysis across different scenarios\n\n\n\n\n\nConfigurable color schemes and layouts\nAdjustable bin sizes and time ranges\nFilterable state selections\nCustom transition definitions"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#output-files",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#output-files",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "The analyzer generates: 1. CSV data file: Contains all dwell time and transition data 2. Interactive plots: Displayed in browser or notebook 3. Static plots: Saved as matplotlib figures 4. Network graphs: Visualized state transition networks"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#dependencies",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#dependencies",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "Required packages: - tbsim: TB simulation framework - starsim: Agent-based simulation framework - plotly: Interactive visualizations - matplotlib: Static plotting - networkx: Network graph visualizations - pandas: Data manipulation - numpy: Numerical computations - scipy: Statistical functions - lifelines: Survival analysis"
  },
  {
    "objectID": "tutorials/README_comprehensive_analyzer_plots.html#example-output",
    "href": "tutorials/README_comprehensive_analyzer_plots.html#example-output",
    "title": "Comprehensive DwtAnalyzer Plots Example",
    "section": "",
    "text": "The comprehensive example will generate: - 8+ different types of Sankey diagrams - 2 network graph visualizations - 3 histogram/distribution plots - 4 interactive bar charts - 3 stacked bar chart variations - 1 custom transition analysis - 1 survival curve - Additional plots using the DwtPlotter directly\nEach plot type provides different insights into the TB simulation dynamics, from high-level state transition patterns to detailed agent-level analysis."
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html",
    "href": "tutorials/tb_interventions_tutorial.html",
    "title": "TB Interventions Tutorial",
    "section": "",
    "text": "This notebook demonstrates how to create and run tuberculosis (TB) simulations with various interventions using the tbsim and starsim libraries. We’ll explore different intervention strategies including BCG vaccination and Tuberculosis Preventive Therapy (TPT)."
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#overview",
    "href": "tutorials/tb_interventions_tutorial.html#overview",
    "title": "TB Interventions Tutorial",
    "section": "Overview",
    "text": "Overview\nIn this tutorial, you will learn:\n\nBuilding TB simulations with intervention capabilities\nDefining different intervention scenarios (BCG, TPT, Beta changes)\nRunning multiple scenarios and comparing results\nVisualizing intervention impacts on TB transmission\n\nThe tutorial is based on the run_tb_interventions.py script and provides a comprehensive introduction to TB intervention modeling."
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#required-packages",
    "href": "tutorials/tb_interventions_tutorial.html#required-packages",
    "title": "TB Interventions Tutorial",
    "section": "Required Packages",
    "text": "Required Packages\nFirst, let’s import the necessary libraries:\n\nimport tbsim as mtb\nimport starsim as ss\nimport sciris as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Set up plotting\nplt.style.use('default')\nplt.rcParams['figure.figsize'] = (12, 8)\nplt.rcParams['font.size'] = 12"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#default-parameters",
    "href": "tutorials/tb_interventions_tutorial.html#default-parameters",
    "title": "TB Interventions Tutorial",
    "section": "Default Parameters",
    "text": "Default Parameters\nLet’s define the default parameters for our simulations:\n\n# Simple default parameters for simulation\nDEFAULT_SPARS = dict(\n    \n    dt=ss.days(7),\n    start=ss.date('1975-01-01'),\n    stop=ss.date('2030-12-31'),\n    rand_seed=123,\n    verbose=0,\n)\n\n# Default TB parameters\nDEFAULT_TBPARS = dict(\n    beta=0.0025,  # Use simple float value\n    init_prev=0.25,  # Use simple float value\n    \n    dt=ss.days(7),      \n    start=ss.date('1975-02-01'),\n    stop=ss.date('2030-12-31'),\n)\n\n# Simple age distribution\nage_data = pd.DataFrame({\n    'age': [0, 2, 4, 10, 15, 20, 30, 40, 50, 60, 70, 80],\n    'value': [20, 10, 25, 15, 10, 5, 4, 3, 2, 1, 1, 1]  # Skewed toward younger ages\n})\n\nprint(\"Default simulation parameters:\")\nfor key, value in DEFAULT_SPARS.items():\n    print(f\"  {key}: {value}\")\n\nprint(\"\\nDefault TB parameters:\")\nfor key, value in DEFAULT_TBPARS.items():\n    print(f\"  {key}: {value}\")\n\nprint(\"\\nAge distribution:\")\nprint(age_data)\n\nDefault simulation parameters:\n  dt: days(7)\n  start: 1975.01.01\n  stop: 2030.12.31\n  rand_seed: 123\n  verbose: 0\n\nDefault TB parameters:\n  beta: 0.0025\n  init_prev: 0.25\n  dt: days(7)\n  start: 1975.02.01\n  stop: 2030.12.31\n\nAge distribution:\n    age  value\n0     0     20\n1     2     10\n2     4     25\n3    10     15\n4    15     10\n5    20      5\n6    30      4\n7    40      3\n8    50      2\n9    60      1\n10   70      1\n11   80      1"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#building-the-simulation-function",
    "href": "tutorials/tb_interventions_tutorial.html#building-the-simulation-function",
    "title": "TB Interventions Tutorial",
    "section": "Building the Simulation Function",
    "text": "Building the Simulation Function\nNow let’s create a function that builds a complete TB simulation with intervention capabilities:\n\ndef build_sim(scenario=None, spars=None):\n    \"\"\"\n    Build and return a complete Starsim-based simulation instance for TB modeling,\n    incorporating optional interventions and user-defined parameters.\n    \n    Args:\n        scenario (dict, optional): A dictionary defining scenario-specific components,\n            such as intervention parameters and TB simulation settings.\n        spars (dict, optional): General simulation parameters.\n    \n    Returns:\n        ss.Sim: A fully initialized simulation object\n    \"\"\"\n    scenario = scenario or {}\n    \n    # Merge parameters\n    spars = {**DEFAULT_SPARS, **(spars or {})}\n    tbpars = {**DEFAULT_TBPARS, **(scenario.get('tbpars') or {})}\n    \n    # Create interventions list\n    interventions = []\n    \n    # Add BCG interventions (can be single or multiple)\n    bcg_params = scenario.get('bcgintervention')\n    if bcg_params:\n        if isinstance(bcg_params, dict):\n            # Single BCG intervention\n            interventions.append(mtb.BCGProtection(pars=bcg_params))\n        elif isinstance(bcg_params, list):\n            # Multiple BCG interventions\n            for i, params in enumerate(bcg_params):\n                params['name'] = f'BCG_{i}'  # Give unique name\n                interventions.append(mtb.BCGProtection(pars=params))\n    \n    # Add TPT interventions (can be single or multiple)\n    tpt_params = scenario.get('tptintervention')\n    if tpt_params:\n        if isinstance(tpt_params, dict):\n            # Single TPT intervention\n            interventions.append(mtb.TPTInitiation(pars=tpt_params))\n        elif isinstance(tpt_params, list):\n            # Multiple TPT interventions\n            for i, params in enumerate(tpt_params):\n                params['name'] = f'TPT_{i}'  # Give unique name\n                interventions.append(mtb.TPTInitiation(pars=params))\n    \n    # Add Beta interventions (can be single or multiple)\n    beta_params = scenario.get('betabyyear')\n    if beta_params:\n        if isinstance(beta_params, dict):\n            # Single Beta intervention\n            interventions.append(mtb.BetaByYear(pars=beta_params))\n        elif isinstance(beta_params, list):\n            # Multiple Beta interventions\n            for i, params in enumerate(beta_params):\n                params['name'] = f'Beta_{i}'  # Give unique name\n                interventions.append(mtb.BetaByYear(pars=params))\n    \n    # Create simulation components\n    pop = ss.People(n_agents=500, age_data=age_data)\n    tb = mtb.TB(pars=tbpars)\n    networks = [\n        ss.RandomNet({'n_contacts': ss.poisson(lam=5), 'dur': 0})\n    ]\n    \n    # Create and return simulation\n    return ss.Sim(\n        people=pop,\n        networks=networks,\n        interventions=interventions,\n        diseases=[tb],\n        pars=spars,\n    )\n\nprint(\"Simulation builder function created successfully!\")\n\nSimulation builder function created successfully!"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#defining-intervention-scenarios",
    "href": "tutorials/tb_interventions_tutorial.html#defining-intervention-scenarios",
    "title": "TB Interventions Tutorial",
    "section": "Defining Intervention Scenarios",
    "text": "Defining Intervention Scenarios\nLet’s create a function that defines different intervention scenarios:\n\ndef get_scenarios():\n    \"\"\"\n    Define a set of simulation scenarios for evaluating TB interventions.\n    \n    Returns:\n        dict: A dictionary where each key is the name of a scenario and the value is \n        a dictionary of simulation parameters.\n    \"\"\"\n    \n    return {\n        'Baseline': {\n            'name': 'No interventions',\n            'tbpars': dict(start=ss.date('1975-01-01'), stop=ss.date('2030-12-31')),\n        },\n        'Single BCG': {\n            'name': 'Single BCG intervention',\n            'tbpars': dict(start=ss.date('1975-01-01'), stop=ss.date('2030-12-31')),\n            'bcgintervention': dict(\n                coverage=0.8,\n                start=ss.date('1980-01-01'),\n                stop=ss.date('2020-12-31'),\n                age_range=[1, 5],\n            ),\n        },\n        'TPT Intervention': {\n            'name': 'TPT intervention',\n            'tbpars': dict(start=ss.date('1975-01-01'), stop=ss.date('2030-12-31')),\n            'tptintervention': dict(\n                coverage=0.7,\n                start=ss.date('1990-01-01'),\n                stop=ss.date('2025-12-31'),\n                age_range=[15, 65],\n            ),\n        },\n        'Beta Change': {\n            'name': 'Beta transmission rate change',\n            'tbpars': dict(start=ss.date('1975-01-01'), stop=ss.date('2030-12-31')),\n            'betabyyear': dict(\n                years=[1990, 2000], \n                x_beta=[0.5, 1.4]\n            )\n        },\n    }\n\n# Display the scenarios\nscenarios = get_scenarios()\nprint(\"Available scenarios:\")\nfor name, scenario in scenarios.items():\n    print(f\"\\n{name}: {scenario['name']}\")\n    if 'bcgintervention' in scenario:\n        print(f\"  - BCG intervention: {scenario['bcgintervention']}\")\n    if 'tptintervention' in scenario:\n        print(f\"  - TPT intervention: {scenario['tptintervention']}\")\n    if 'betabyyear' in scenario:\n        print(f\"  - Beta change: {scenario['betabyyear']}\")\n\nAvailable scenarios:\n\nBaseline: No interventions\n\nSingle BCG: Single BCG intervention\n  - BCG intervention: {'coverage': 0.8, 'start': &lt;1980.01.01&gt;, 'stop': &lt;2020.12.31&gt;, 'age_range': [1, 5]}\n\nTPT Intervention: TPT intervention\n  - TPT intervention: {'coverage': 0.7, 'start': &lt;1990.01.01&gt;, 'stop': &lt;2025.12.31&gt;, 'age_range': [15, 65]}\n\nBeta Change: Beta transmission rate change\n  - Beta change: {'years': [1990, 2000], 'x_beta': [0.5, 1.4]}"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#running-a-single-scenario",
    "href": "tutorials/tb_interventions_tutorial.html#running-a-single-scenario",
    "title": "TB Interventions Tutorial",
    "section": "Running a Single Scenario",
    "text": "Running a Single Scenario\nLet’s start by running a single baseline scenario to understand the basic simulation:\n\n# Run baseline scenario\nprint(\"Running baseline scenario...\")\nbaseline_scenario = scenarios['Baseline']\nbaseline_sim = build_sim(scenario=baseline_scenario)\nbaseline_sim.run()\n\n# print(f\"Simulation completed!\")\n# print(f\"Final population size: {len(baseline_sim.people)}\")\n# print(f\"Simulation duration: {baseline_sim.n_steps} timesteps\")\n# print(f\"Time period: {baseline_sim.start} to {baseline_sim.stop}\")\n\nRunning baseline scenario...\n\n\nSim(n=500; 1975.01.01—2030.12.31; networks=randomnet; diseases=tb)"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#exploring-baseline-results",
    "href": "tutorials/tb_interventions_tutorial.html#exploring-baseline-results",
    "title": "TB Interventions Tutorial",
    "section": "Exploring Baseline Results",
    "text": "Exploring Baseline Results\nLet’s examine the baseline simulation results:\n\n# Get baseline results\nbaseline_results = baseline_sim.results.flatten()\n\n# Display available result keys\nprint(\"Available result metrics:\")\nfor key in baseline_results.keys():\n    print(f\"  - {key}\")\n\n# Show some key metrics\nprint(\"\\nKey TB metrics:\")\ntb_metrics = [key for key in baseline_results.keys() if 'tb' in key.lower()]\nfor metric in tb_metrics[:10]:  # Show first 10 TB metrics\n    value = baseline_results[metric]\n    if hasattr(value, '__len__') and len(value) &gt; 0:\n        print(f\"  {metric}: {value[-1]:.3f} (final value)\")\n    else:\n        print(f\"  {metric}: {value}\")\n\nAvailable result metrics:\n  - randomnet_n_edges\n  - tb_n_susceptible\n  - tb_n_infected\n  - tb_n_on_treatment\n  - tb_n_ever_infected\n  - tb_prevalence\n  - tb_new_infections\n  - tb_cum_infections\n  - tb_n_latent_slow\n  - tb_n_latent_fast\n  - tb_n_active\n  - tb_n_active_presymp\n  - tb_n_active_presymp_15+\n  - tb_n_active_smpos\n  - tb_n_active_smpos_15+\n  - tb_n_active_smneg\n  - tb_n_active_smneg_15+\n  - tb_n_active_exptb\n  - tb_n_active_exptb_15+\n  - tb_new_active\n  - tb_new_active_15+\n  - tb_new_deaths\n  - tb_new_deaths_15+\n  - tb_n_infectious\n  - tb_n_infectious_15+\n  - tb_prevalence_active\n  - tb_incidence_kpy\n  - tb_deaths_ppy\n  - tb_n_reinfected\n  - tb_new_notifications_15+\n  - tb_n_detectable_15+\n  - n_alive\n  - new_deaths\n  - cum_deaths\n\nKey TB metrics:\n  tb_n_susceptible: 492.000 (final value)\n  tb_n_infected: 112.000 (final value)\n  tb_n_on_treatment: 0.000 (final value)\n  tb_n_ever_infected: 120.000 (final value)\n  tb_prevalence: 0.226 (final value)\n  tb_new_infections: 0.000 (final value)\n  tb_cum_infections: 1.000 (final value)\n  tb_n_latent_slow: 109.000 (final value)\n  tb_n_latent_fast: 0.000 (final value)\n  tb_n_active: 3.000 (final value)"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#plotting-baseline-results",
    "href": "tutorials/tb_interventions_tutorial.html#plotting-baseline-results",
    "title": "TB Interventions Tutorial",
    "section": "Plotting Baseline Results",
    "text": "Plotting Baseline Results\nLet’s create some basic plots to visualize the baseline TB dynamics:\n\nbaseline_sim.plot()\n\nFigure(1200x900)"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#running-multiple-scenarios",
    "href": "tutorials/tb_interventions_tutorial.html#running-multiple-scenarios",
    "title": "TB Interventions Tutorial",
    "section": "Running Multiple Scenarios",
    "text": "Running Multiple Scenarios\nNow let’s run multiple scenarios to compare the effects of different interventions:\n\ndef run_scenarios(scenario_names=None, plot=True):\n    \"\"\"Run multiple scenarios and optionally plot results.\"\"\"\n    \n    all_scenarios = get_scenarios()\n    \n    if scenario_names is None:\n        scenario_names = ['Baseline', 'Single BCG', 'TPT Intervention']\n    \n    results = {}\n    \n    for name in scenario_names:\n        if name in all_scenarios:\n            print(f\"\\nRunning: {name}\")\n            scenario = all_scenarios[name]\n            sim = build_sim(scenario=scenario)\n            sim.run()\n            results[name] = sim.results.flatten()\n        else:\n            print(f\"Warning: Scenario '{name}' not found\")\n    \n    if plot:\n        mtb.plot_combined(results)\n    \n    return results\n\n# Run selected scenarios\nselected_scenarios = ['Baseline', 'Single BCG']"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#creating-comparison-plots",
    "href": "tutorials/tb_interventions_tutorial.html#creating-comparison-plots",
    "title": "TB Interventions Tutorial",
    "section": "Creating Comparison Plots",
    "text": "Creating Comparison Plots\nLet’s create a function to compare results across different scenarios:\n\n\nresults = run_scenarios(selected_scenarios, plot=True)\n\n# print(f\"\\nCompleted {len(results)} scenarios successfully!\")\n\n\nRunning: Baseline\n\nRunning: Single BCG\n\n\n/Users/mine/newgit/newtbsim/venv/lib/python3.12/site-packages/starsim/sim.py:579: RuntimeWarning: \nThe following methods are required, but were not called.\nDid you mistype a method name, forget a super() call,\nor did part of the sim not run (e.g. zero infections)?\n&lt;class 'tbsim.interventions.bcg.BCGProtection'&gt;: Module.init_results\n\n  ss.warn(errormsg)\n\n\nSaved figure to /Users/mine/newgit/newtbsim/docs/tutorials/results/scenarios_20250901_004107.png"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#intervention-impact-analysis",
    "href": "tutorials/tb_interventions_tutorial.html#intervention-impact-analysis",
    "title": "TB Interventions Tutorial",
    "section": "Intervention Impact Analysis",
    "text": "Intervention Impact Analysis\nLet’s analyze the impact of interventions by calculating key metrics:\n\ndef analyze_intervention_impact(results):\n    \"\"\"Analyze the impact of interventions compared to baseline.\"\"\"\n    \n    if 'Baseline' not in results:\n        print(\"Warning: Baseline scenario not found for comparison\")\n        return\n    \n    baseline = results['Baseline']\n    \n    print(\"Intervention Impact Analysis (compared to Baseline):\")\n    print(\"=\" * 60)\n    \n    for name, result in results.items():\n        if name == 'Baseline':\n            continue\n            \n        print(f\"\\n{name}:\")\n        \n        # Compare final prevalence\n        if 'tb_prevalence' in result and 'tb_prevalence' in baseline:\n            baseline_final = baseline['tb_prevalence'][-1]\n            intervention_final = result['tb_prevalence'][-1]\n            reduction = ((baseline_final - intervention_final) / baseline_final) * 100\n            print(f\"  Final TB Prevalence: {intervention_final:.3f} (vs {baseline_final:.3f})\")\n            print(f\"  Prevalence Reduction: {reduction:.1f}%\")\n        \n        # Compare cumulative deaths\n        if 'tb_deaths' in result and 'tb_deaths' in baseline:\n            baseline_deaths = np.sum(baseline['tb_deaths'])\n            intervention_deaths = np.sum(result['tb_deaths'])\n            death_reduction = ((baseline_deaths - intervention_deaths) / baseline_deaths) * 100\n            print(f\"  Total TB Deaths: {intervention_deaths:.0f} (vs {baseline_deaths:.0f})\")\n            print(f\"  Death Reduction: {death_reduction:.1f}%\")\n        \n        # Compare average incidence\n        if 'tb_incidence' in result and 'tb_incidence' in baseline:\n            baseline_avg_incidence = np.mean(baseline['tb_incidence'])\n            intervention_avg_incidence = np.mean(result['tb_incidence'])\n            incidence_reduction = ((baseline_avg_incidence - intervention_avg_incidence) / baseline_avg_incidence) * 100\n            print(f\"  Average Incidence: {intervention_avg_incidence:.3f} (vs {baseline_avg_incidence:.3f})\")\n            print(f\"  Incidence Reduction: {incidence_reduction:.1f}%\")\n\n# Run the analysis\nanalyze_intervention_impact(results)\n\nIntervention Impact Analysis (compared to Baseline):\n============================================================\n\nSingle BCG:\n  Final TB Prevalence: 0.227 (vs 0.226)\n  Prevalence Reduction: -0.5%"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#advanced-custom-scenario-creation",
    "href": "tutorials/tb_interventions_tutorial.html#advanced-custom-scenario-creation",
    "title": "TB Interventions Tutorial",
    "section": "Advanced: Custom Scenario Creation",
    "text": "Advanced: Custom Scenario Creation\nLet’s create a custom scenario to demonstrate how to define your own interventions:\n\n# Create a custom scenario with multiple interventions\ncustom_scenario = {\n    'name': 'Combined BCG + TPT + Beta Reduction',\n    'tbpars': dict(\n        start=ss.date('1975-01-01'), \n        stop=ss.date('2030-12-31'),\n        beta=0.0020  # Lower baseline transmission\n    ),\n    'bcgintervention': dict(\n        coverage=0.85,\n        start=ss.date('1980-01-01'),\n        stop=ss.date('2020-12-31'),\n        age_range=[0, 5],\n    ),\n    'betabyyear': dict(\n        years=[1990, 2000, 2010], \n        x_beta=[0.8, 0.6, 0.4]  # Gradual reduction in transmission\n    )\n}\n\nprint(\"Custom scenario created:\")\nprint(f\"  Name: {custom_scenario['name']}\")\nprint(f\"  BCG coverage: {custom_scenario['bcgintervention']['coverage']}\")\nprint(f\"  Beta reduction: {custom_scenario['betabyyear']['x_beta']}\")\n\n# Run the custom scenario\nprint(\"\\nRunning custom scenario...\")\ncustom_sim = build_sim(scenario=custom_scenario)\ncustom_sim.run()\ncustom_results = custom_sim.results.flatten()\n\nprint(\"Custom scenario completed!\")\n\n# Add to results for comparison\nresults['Custom Combined'] = custom_results\n\nmtb.plot_combined(results, n_cols=5)\n\nCustom scenario created:\n  Name: Combined BCG + TPT + Beta Reduction\n  BCG coverage: 0.85\n  Beta reduction: [0.8, 0.6, 0.4]\n\nRunning custom scenario...\nAt year:1990, Modified BetaValue:0.8\nAt year:2000, Modified BetaValue:0.6\nAt year:2010, Modified BetaValue:0.4\n\n\n/Users/mine/newgit/newtbsim/venv/lib/python3.12/site-packages/starsim/sim.py:579: RuntimeWarning: \nThe following methods are required, but were not called.\nDid you mistype a method name, forget a super() call,\nor did part of the sim not run (e.g. zero infections)?\n&lt;class 'tbsim.interventions.bcg.BCGProtection'&gt;: Module.init_results\n\n  ss.warn(errormsg)\n\n\nCustom scenario completed!\nSaved figure to /Users/mine/newgit/newtbsim/docs/tutorials/results/scenarios_20250901_004115.png"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#summary-and-key-takeaways",
    "href": "tutorials/tb_interventions_tutorial.html#summary-and-key-takeaways",
    "title": "TB Interventions Tutorial",
    "section": "Summary and Key Takeaways",
    "text": "Summary and Key Takeaways\nIn this tutorial, we’ve learned how to:\n\nBuild TB simulations with intervention capabilities using tbsim and starsim\nDefine different intervention types:\n\nBCG vaccination: Reduces TB transmission and severity\nTPT (Tuberculosis Preventive Therapy): Prevents progression from latent to active TB\nBeta changes: Modifies transmission rates over time\n\nRun multiple scenarios and compare their impacts\nAnalyze intervention effectiveness through key metrics like prevalence, incidence, and mortality\nCreate custom scenarios with multiple interventions\n\n\nKey Findings:\n\nBCG vaccination shows significant impact on reducing TB prevalence, especially when targeting young children\nTPT interventions can be effective in reducing TB incidence and mortality\nCombined interventions often provide the best outcomes\nTransmission rate modifications (beta changes) can simulate public health measures or environmental changes\n\n\n\nNext Steps:\nYou can extend this tutorial by: - Exploring different parameter combinations - Adding more complex intervention scenarios - Incorporating additional comorbidities (HIV, malnutrition) - Analyzing cost-effectiveness of interventions - Running sensitivity analyses on key parameters"
  },
  {
    "objectID": "tutorials/tb_interventions_tutorial.html#references-and-further-reading",
    "href": "tutorials/tb_interventions_tutorial.html#references-and-further-reading",
    "title": "TB Interventions Tutorial",
    "section": "References and Further Reading",
    "text": "References and Further Reading\n\ntbsim documentation: For detailed API reference and advanced features\nstarsim documentation: For general simulation framework capabilities\nTB modeling literature: For epidemiological context and validation\nIntervention studies: For real-world intervention effectiveness data\n\nThis tutorial provides a foundation for TB intervention modeling that can be adapted for specific research questions and policy analysis."
  }
]